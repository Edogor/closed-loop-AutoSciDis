import {doc, getDoc, updateDoc, setDoc} from 'firebase/firestore'

const getCondition = async (db, study, pId = null) => {
    /**
     * Get the metadata to check if there is an available condition
     * if there is an available condition:
     *  set start_time in the metadata
     *  get condition from the db and return id and condition
     * if there is no condition:
     *  redirect to an error page
     */
    const docRefMeta = doc(db, study, 'autora_meta');
    const docSnapMeta = await getDoc(docRefMeta);
    const meta = docSnapMeta.data()
    for (let key in meta) {
        if (meta[key]['start_time'] === null) {
            const unixTime = Math.floor(Date.now() / 1000);
            await updateDoc(docRefMeta, {[key]: {'start_time': unixTime, 'finished': false, 'pId': pId}});
            const docRefCondition = doc(db, study, 'autora_in', 'conditions', key);
            const docSnapCondition = await getDoc(docRefCondition)
            const condition = docSnapCondition.data()[key]
            return [key, condition]
        }
    }
    return false
};


const setObservation = async (db, study, id, observation, meta = true) => {
    /**
     * Set the metadata of the id to finished and save the data to the autora observation table
     * if meta is set to false, set don't set metadata.
     */
    let retryCount = 0
    const MAX_RETRIES = 10
    const DELAY_MS = 1000
    while (retryCount < MAX_RETRIES) {
        try {
            if (meta) {
                const docRefMeta = doc(db, study, 'autora_meta');
                await updateDoc(docRefMeta, {[`${id}.finished`]: true});
            }
            const docRefOut = doc(db, study, 'autora_out', 'observations', id);
            await setDoc(docRefOut, {[id]: observation})
            return
        } catch (error) {
            retryCount++;
            await new Promise(resolve => setTimeout(resolve, DELAY_MS))
        }
    }
}


const setBackup = async (db, study, id, condition, observation) => {
    /**
     * Save the data to the backup table without updating metadata.
     */
    const time = Date.now()
    const docRefOut = doc(db, study, 'autora_out', 'data_all', `${id}_${time.toString()}`);
    await setDoc(docRefOut, {'condition': condition, 'observation': observation})
}


export {getCondition, setObservation, setBackup}