{"ast":null,"code":"import { ParameterType } from 'jspsych';\nconst info = {\n  name: \"rok\",\n  parameters: {\n    /** The valid keys that the subject can press to indicate a response. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\"\n    },\n    /** The correct keys for that trial. */\n    correct_choice: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Correct choice\",\n      default: undefined\n    },\n    /** The length of stimulus presentation. Zero for endless loop. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: 0\n    },\n    /** If true, then any valid key will end the trial. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true\n    },\n    /** The number of oriented objects per set in the stimulus. */\n    number_of_oobs: {\n      type: ParameterType.INT,\n      pretty_name: \"Number of oriented objectes\",\n      default: 300\n    },\n    /** The direction of coherent motion in degrees (0 degre meaning right). */\n    coherent_movement_direction: {\n      type: ParameterType.INT,\n      pretty_name: \"Coherent movement direction\",\n      default: 0\n    },\n    /** The orientation of the objects in degree (0 degree meaning right). */\n    coherent_orientation: {\n      type: ParameterType.INT,\n      pretty_name: \"Coherent object orientation\",\n      default: 0\n    },\n    /** The percentage of oriented objects moving in the coherent direction. */\n    coherence_movement: {\n      type: ParameterType.INT,\n      pretty_name: \"Movement coherence\",\n      default: 50\n    },\n    /** The percentage of objects that are oriented in the coherent orientation. */\n    coherence_orientation: {\n      type: ParameterType.INT,\n      pretty_name: \"Orientation coherence\",\n      default: 50\n    },\n    /** The percentage of oriented objects moving in the direction opposite of the coherent direction. */\n    coherence_movement_opposite: {\n      type: ParameterType.INT,\n      pretty_name: \"Opposite movement coherence\",\n      default: 0\n    },\n    /** The percentage of objects that are oriented opposite of the coherent orientation. */\n    coherence_orientation_opposite: {\n      type: ParameterType.INT,\n      pretty_name: \"Opposite orientation coherence\",\n      default: 0\n    },\n    /** The movement speed of the oobs in (percentage of aperature_width)/second. */\n    movement_speed: {\n      type: ParameterType.INT,\n      pretty_name: \"Movement Speed\",\n      default: 10\n    },\n    /** The percentage of randomisation in movement speed \" +\r\n         \"(0 meaning all orientated objects move with speed defined in movement_speed,\" +\r\n         \" 100 meaning movement speeds from 0 to 2x movement_speed). */\n    movement_speed_randomisation: {\n      type: ParameterType.INT,\n      pretty_name: \"Movement speed randomisation\",\n      default: 0\n    },\n    /** The size of the orientated objects in percentage of aperture_width. */\n    oob_size: {\n      type: ParameterType.INT,\n      pretty_name: \"Object size\",\n      default: 2\n    },\n    /** The width of the aperture in pixels. */\n    aperture_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Aperture width\",\n      default: 600\n    },\n    /** The height of the aperture in pixels. */\n    aperture_height: {\n      type: ParameterType.INT,\n      pretty_name: \"Aperture height\",\n      default: 400\n    },\n    /** The color of the dots. */\n    oob_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Dot color\",\n      default: \"white\"\n    },\n    /** The background of the stimulus. */\n    background_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Background color\",\n      default: \"gray\"\n    },\n    /** The presence of a border around the aperture. */\n    border: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Border\",\n      default: false\n    },\n    /** The thickness of the border in pixels. */\n    border_thickness: {\n      type: ParameterType.INT,\n      pretty_name: \"Border width\",\n      default: 1\n    },\n    /**The color of the border. */\n    border_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Border Color\",\n      default: 1\n    },\n    /** Apperance of stimulus (0-triangles, 1-circle, 2-square, 3-origami_birds, 4-image). */\n    stimulus_type: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus type\",\n      default: 0\n    },\n    /** Shade of aperture (0 - rectangular, 1 - elliptic). */\n    aperture_shape: {\n      type: ParameterType.INT,\n      pretty_name: \"aperture shape\",\n      default: 0\n    },\n    /** Backgroundcolor of aperture */\n    aperture_background_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Background of aperture\",\n      default: \"#0000\"\n    },\n    /** Type of random movement (0 direction is random but fixed, 1 movement direction of incoherent oobs changes over time). */\n    random_movement_type: {\n      type: ParameterType.INT,\n      pretty_name: \"Random movement type\",\n      default: 0\n    },\n    /** Type of random movement (0 - orientation is random but fixed, 1 - orientation of incoherent oobs changes over time). */\n    random_orientation_type: {\n      type: ParameterType.INT,\n      pretty_name: \"Random orientation type\",\n      default: 0\n    },\n    /** Number of apertures. If greater then one, other parameters of trial should be arrays. */\n    number_of_apertures: {\n      type: ParameterType.INT,\n      pretty_name: \"Number of apertures\",\n      default: 1\n    },\n    /** If this parameter is set, number_of_objects is interpreted as average number_of_objects per density_unit_area (in pixels). */\n    density_unit_area: {\n      type: ParameterType.INT,\n      pretty_name: \"Density area\",\n      default: null\n    },\n    /** Position of midpoint of aperture in x direction in percentage of window width (50 being middle). */\n    aperture_position_left: {\n      type: ParameterType.INT,\n      pretty_name: \"Horizontal position of aperature\",\n      default: 50\n    },\n    /** Position of midpoint of aperture in y direction in percentage of window width (0 being top, 50 being middle, 100 being bot). */\n    aperture_position_top: {\n      type: ParameterType.INT,\n      pretty_name: \"Vertical position of aperature\",\n      default: 50\n    },\n    /** Prompt that is presented above the stimulus. */\n    prompt: {\n      type: ParameterType.STRING,\n      pretty_name: \"Prompt\",\n      default: null\n    },\n    /** Fade the oobs on the edges of the aperture. */\n    fade_out: {\n      type: ParameterType.INT,\n      pretty_name: \"Fade out on edges\",\n      default: 0\n    },\n    /** Pictures of stimuli, can be key-framed(animated) or randomised, see documentation. */\n    stimulus_image: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Stimuli pictures\",\n      default: null\n    },\n    /** Background image, can be key-framed(animated) or randomised, see documentation. */\n    background_image: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Background image\",\n      default: null\n    },\n    /** Number of keyframes in stimulus images. */\n    stimulus_image_keyframes: {\n      type: ParameterType.INT,\n      pretty_name: \"Keyframes of stimulus pictures\",\n      default: 1\n    },\n    /** Number of keyframes in background pictures. */\n    background_image_keyframes: {\n      type: ParameterType.INT,\n      pretty_name: \"Keframse of background pictures\",\n      default: 1\n    },\n    /** Time between keyframes. */\n    stimulus_keyframe_time: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Keyframe time\",\n      default: 0.1\n    },\n    /** Mirror image instead of rotating (1 - x axis, 2 - y axis). */\n    stimulus_mirror: {\n      type: ParameterType.INT,\n      pretty_name: \"Mirror image time\",\n      default: 0\n    },\n    /** Sets experiment to congruency mode: experiment_main_task has to be  set (0 = movement or 1 = orientation) if this is set to 1 or 2. The\" +\r\n         \"congruency of the task does only apply to coherent oobs of main task. If this is set to 1 the remaining oobs secondary feature (the non task feature) is set at random.\" +\r\n         \"If this is set to 2 the remaining oobs have the same direction and orientation .*/\n    experiment_congruency_mode: {\n      type: ParameterType.INT,\n      pretty_name: \"Experiment congruency mode\",\n      default: 0\n    },\n    /** Sets the main task when experiment is in congruency mode. The congruency of the other task then only\" +\r\n         \"applies to non random oobs of main task. */\n    experiment_main_task: {\n      type: ParameterType.INT,\n      pretty_name: \"Main task when experiment is set to congruency mode (0- movement, 1-orientation)\",\n      default: 0\n    },\n    /** Units in which size and speed of oobs is expressed (null - percentage of aperture width, px - pixels). */\n    units: {\n      type: ParameterType.STRING,\n      pretty_name: \"Units in which size and speed of oobs is expressed\",\n      default: null\n    },\n    /** Should stimuli be drawn on top of each other or intermixed **/\n    aperture_draw_mode: {\n      type: ParameterType.STRING,\n      pretty_name: \"When in overlay draws stimuli of different apertures on top of each other. When in intermixed oobs all show up in one aperture intermixed\",\n      default: \"overlay\"\n    }\n  }\n};\n/**\r\n * **ROK**\r\n *\r\n * jsPsych plugin for showing a random object kinematogram stimulus and recording a keyboard response\r\n *\r\n * @author Younes Strittmatter\r\n * @see {@link https://www.jspsych.org/plugins/jspsych-rok/ RDK plugin documentation on jspsych.org}\r\n * @copyright\r\n *\r\n *    We would appreciate it if you cited this paper when you use the ROK:\r\n *\r\n * ----------------------\r\n *\r\n * Copyright (C) 2021 Younes Strittmatter\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n */\nclass RokPlugin {\n  constructor(jsPsych) {\n    this.jsPsych = jsPsych;\n  }\n  trial(display_element, trial) {\n    //--------------------------------------\n    //---------SET PARAMETERS BEGIN---------\n    //--------------------------------------\n    //Note on '||' logical operator: If the first option is 'undefined', it evalutes to 'false' and the second option is returned as the assignment\n    // Note: trial properties are now read-only, so these params have all been changed to separate variables here and throughout trial function\n    var choices = assignParameterValue(trial.choices, []); //info.parameters.choices.default);\n    var correct_choice = assignParameterValue(trial.correct_choice, undefined); //info.parameters.correct_choice.default);\n    var trial_duration = assignParameterValue(trial.trial_duration, 0); //info.parameters.trial_duration.default);\n    var response_ends_trial = assignParameterValue(trial.response_ends_trial, true); //info.parameters.response_ends_trial.default);\n    var number_of_oobs = assignParameterValue(trial.number_of_oobs, 300); //info.parameters.number_of_oobs.default);\n    var coherent_movement_direction = assignParameterValue(trial.coherent_movement_direction, 0); // info.parameters.coherent_movement_direction.default);\n    var coherent_orientation = assignParameterValue(trial.coherent_orientation, 0); // info.parameters.coherent_orientation.default);\n    var coherence_movement = assignParameterValue(trial.coherence_movement, 50); //info.parameters.coherence_movement.default);\n    var coherence_orientation = assignParameterValue(trial.coherence_orientation, 50); //info.parameters.coherence_orientation.default);\n    var coherence_movement_opposite = assignParameterValue(trial.coherence_movement_opposite, 50); //info.parameters.coherence_movement_opposite.default);\n    var coherence_orientation_opposite = assignParameterValue(trial.coherence_orientation_opposite, 50); //info.parameters.coherence_orientation_opposite.default);\n    var movement_speed = assignParameterValue(trial.movement_speed, 10); //info.parameters.movement_speed.default);\n    var movement_speed_randomisation = assignParameterValue(trial.movement_speed_randomisation, 0); // info.parameters.movement_speed_randomisation.default);\n    var oob_size = assignParameterValue(trial.oob_size, 2); //info.parameters.oob_size.default);\n    var aperture_width = assignParameterValue(trial.aperture_width, 600); //info.parameters.aperture_width.default);\n    var aperture_height = assignParameterValue(trial.aperture_height, 400); //info.parameters.aperture_height.default);\n    var oob_color = assignParameterValue(trial.oob_color, \"white\"); //info.parameters.oob_color.default);\n    var background_color = assignParameterValue(trial.background_color, \"gray\"); //info.parameters.background_color.default);\n    var aperture_background_color = assignParameterValue(trial.aperture_background_color, \"#0000\");\n    assignParameterValue(trial.border, false); //info.parameters.border.default);\n    assignParameterValue(trial.border_thickness, 1); //info.parameters.border_thickness.default);\n    assignParameterValue(trial.border_color, \"white\"); //info.parameters.border_color.default);\n    var stimulus_type = assignParameterValue(trial.stimulus_type, 0); //info.parameters.stimulus_type.default);\n    var aperture_shape = assignParameterValue(trial.aperture_shape, 0); //info.parameters.aperture_shape.default);\n    var random_movement_type = assignParameterValue(trial.random_movement_type, 0); //info.parameters.random_movement_type.default);\n    var random_orientation_type = assignParameterValue(trial.random_orientation_type, 0); //info.parameters.random_orientation_type.default);\n    var number_of_apertures = assignParameterValue(trial.number_of_apertures, 1); //info.parameters.number_of_apertures.default);\n    var density_unit_area = assignParameterValue(trial.density_unit_area, null); //info.parameters.number_of_apertures.default);\n    var aperture_position_left = assignParameterValue(trial.aperture_position_left, 50); //info.parameters.aperture_position_left.default);\n    var aperture_position_top = assignParameterValue(trial.aperture_position_top, 50); //info.parameters.aperture_position_top.default);\n    var prompt = assignParameterValue(trial.prompt, null); //info.parameters.prompt.default);\n    var fade_out = assignParameterValue(trial.fade_out, 0); //info.parameters.fade_out.default);\n    var stimulus_image = assignParameterValue(trial.stimulus_image, null); //info.parameters.stimulus_image.default);\n    var background_image = assignParameterValue(trial.background_image, null); //info.parameters.background_image.default);\n    var stimulus_image_keyframes = assignParameterValue(trial.stimulus_image_keyframes, 1); //info.parameters.stimulus_image_keyframes.default);\n    assignParameterValue(trial.background_image_keyframes, 1); //info.parameters.background_image_keyframes.default);\n    var stimulus_keyframe_time = assignParameterValue(trial.stimulus_keyframe_time, 0.1); //info.parameters.stimulus_keyframe_time.default);\n    var stimulus_mirror = assignParameterValue(trial.stimulus_mirror, 0); //info.parameters.stimulus_mirror.default);\n    var experiment_congruency_mode = assignParameterValue(trial.experiment_congruency_mode, 0); //info.parameters.experiment_congruency_mode.default);\n    var experiment_main_task = assignParameterValue(trial.experiment_main_task, 0); //info.parameters.experiment_main_task.default);\n    var units = assignParameterValue(trial.units, null);\n    var aperture_mode = assignParameterValue(trial.aperture_draw_mode, \"overlay\");\n    //--------------------------------------\n    //----------SET PARAMETERS END----------\n    //--------------------------------------\n    //--------Set up canvases BEGIN -------\n    let nApertures = number_of_apertures;\n    let nAperturesTmp = nApertures;\n    if (aperture_mode !== \"overlay\") {\n      nApertures = 1;\n    }\n    //Create canvas elements and append it to the DOM\n    var canvasArray = [];\n    var containerArray = [];\n    if (nApertures > 1) {\n      for (let i = 0; i < nApertures; i++) {\n        containerArray.push(document.createElement(\"div\"));\n        canvasArray.push(document.createElement(\"canvas\"));\n      }\n    } else {\n      containerArray.push(document.createElement(\"div\"));\n      canvasArray.push(document.createElement(\"canvas\"));\n    }\n    for (let i = 0; i < nApertures; i++) {\n      let imgPath = getValueFromArrayOrNot(background_image, i);\n      if (imgPath != null) {\n        containerArray[i].style.backgroundImage = \"url(\" + getValueFromArrayOrNot(background_image, i) + \")\";\n        containerArray[i].style.backgroundRepeat = \"no-repeat\";\n        containerArray[i].style.backgroundSize = \"cover\";\n      }\n      display_element.appendChild(containerArray[i]);\n      containerArray[i].appendChild(canvasArray[i]);\n      if (Array.isArray(prompt)) {\n        let p = document.createElement(\"div\");\n        p.style.margin = \"0\";\n        p.style.padding = \"0\";\n        containerArray[i].appendChild(p);\n        p.style.textAlign = \"center\";\n        p.innerHTML = prompt[i];\n        p.style.position = \"absolute\";\n        p.style.transform = \"translate(-50%, 100%)\";\n        p.style.textAlign = \"center\";\n        p.style.top = 10 + getValueFromArrayOrNot(aperture_height, 0) / 2 + \"px\";\n        p.style.width = getValueFromArrayOrNot(aperture_width, 0) + \"px\";\n      }\n    }\n    if (prompt != null && !Array.isArray(prompt)) {\n      let p = document.createElement(\"div\");\n      p.style.margin = \"0\";\n      p.style.padding = \"0\";\n      containerArray[0].appendChild(p);\n      p.style.textAlign = \"center\";\n      p.innerHTML = prompt;\n      p.style.position = \"absolute\";\n      p.style.transform = \"translate(-50%, 100%)\";\n      p.style.textAlign = \"center\";\n      p.style.top = 10 + getValueFromArrayOrNot(aperture_height, 0) / 2 + \"px\";\n      p.style.width = getValueFromArrayOrNot(aperture_width, 0) + \"px\";\n    }\n    //Get body element from jsPsych\n    let body = document.getElementsByClassName(\"jspsych-display-element\")[0];\n    //Save the current settings to be restored later\n    let originalMargin = body.style.margin;\n    let originalPadding = body.style.padding;\n    let originalBackgroundColor = body.style.backgroundColor;\n    //Remove the margins and paddings of the display_element\n    body.style.margin = \"0\";\n    body.style.padding = \"0\";\n    //Remove the margins and padding of the canvas, center it\n    for (let i = 0; i < nApertures; i++) {\n      containerArray[i].style.margin = \"0px\";\n      containerArray[i].style.margin = \"0px\";\n      canvasArray[i].style.margin = \"0px\";\n      canvasArray[i].style.padding = \"0px\";\n      canvasArray[i].style.position = \"absolute\";\n      canvasArray[i].style.transform = \"translate(-50%, -50%)\";\n    }\n    //Set background color of body to be the same as\n    body.style.backgroundColor = background_color;\n    //Get the contexts of the canvases\n    let ctxArray = [];\n    for (let i = 0; i < nApertures; i++) {\n      ctxArray.push(canvasArray[i].getContext(\"2d\"));\n    }\n    // get dimensions of display element\n    const disp_size = body.getBoundingClientRect();\n    //Set canvases width, height, position and color;\n    for (let i = 0; i < nApertures; i++) {\n      canvasArray[i].width = getValueFromArrayOrNot(aperture_width, i);\n      canvasArray[i].height = getValueFromArrayOrNot(aperture_height, i);\n      canvasArray[i].style.backgroundColor = getValueFromArrayOrNot(aperture_background_color, i);\n      containerArray[i].style.position = \"absolute\";\n      if (Array.isArray(aperture_position_left) && Array.isArray(aperture_position_top)) {\n        // calculate top from display size (resize module doesn't work with top beeing a percentage)\n        let top = Math.round(aperture_position_top[i] * disp_size.height / 100);\n        containerArray[i].style.top = top.toString() + \"px\";\n        containerArray[i].style.left = aperture_position_left[i].toString() + \"%\";\n      } else {\n        if (nApertures > 1) {\n          let x;\n          if (nApertures % 2 == 0) {\n            x = i * (100 / nApertures) + 100 / (2 * nApertures);\n          } else {\n            x = i * (100 / (nApertures + 1)) + 100 / (2 * (nApertures - 1));\n          }\n          // calculate top from display size (resize module doesn't work with top being a percentage)\n          let top = Math.round(aperture_position_top * disp_size.height / 100);\n          containerArray[i].style.top = top.toString() + \"px\";\n          containerArray[i].style.left = x.toString() + \"%\";\n        } else {\n          // calculate top from display size (resize module doesn't work with top being a percentage)\n          let top = Math.round(aperture_position_top * disp_size.height / 100);\n          containerArray[i].style.top = top.toString() + \"px\";\n          containerArray[i].style.left = aperture_position_left.toString() + \"%\";\n        }\n      }\n    }\n    //--------Set up canvases END-------\n    //--------rok variables and function calls begin--------\n    //Initialize stopping condition for animation function that runs in a loop\n    let stopOobMotion = false;\n    //Variable to start the timer\n    let timerHasStarted = false;\n    //Initialize object to store the response data. Default values of -1 are used if the trial times out and the subject has not pressed a valid key\n    let response = {\n      rt: -1,\n      key: \"\"\n    };\n    //Declare a global timeout ID to be initialized below in animateDotMotion function and to be used in after_response function\n    let timeoutID;\n    //Declare global variable to be defined in startKeyboardListener function and to be used in end_trial function\n    let keyboardListener;\n    //Declare global variable to store the frame rate of the trial\n    var frameRate = []; //How often the monitor refreshes, in ms. Currently an array to store all the intervals. Will be converted into a single number (the average) in end_trial function.\n    //variable to store how many frames were presented.\n    let numberOfFrames = 0;\n    // get the images if specified\n    let img = [];\n    if (stimulus_image != null) {\n      let imgSrc = stimulus_image;\n      if (!Array.isArray(imgSrc)) {\n        let i = document.createElement(\"img\");\n        i.src = imgSrc;\n        img.push(i);\n      } else {\n        for (let j = 0; j < imgSrc.length; j++) {\n          let iS = imgSrc[j];\n          if (!Array.isArray(iS)) {\n            let i = document.createElement(\"img\");\n            i.src = iS;\n            img.push(i);\n          } else {\n            let i = [];\n            for (let k = 0; k < iS[j].length; k++) {\n              let p = document.createElement(\"img\");\n              p.src = iS[k];\n              i.push(p);\n            }\n            img.push(i);\n          }\n        }\n      }\n    }\n    let oobs = [];\n    //Calculate the number of coherent, opposite coherent, and incoherent oobs for movement/orientation\n    for (let i = 0; i < nAperturesTmp; i++) {\n      let nOob = getValueFromArrayOrNot(number_of_oobs, i);\n      // set number of objects, if density_unit_area is set\n      if (density_unit_area != null) {\n        let width = getValueFromArrayOrNot(aperture_width, i);\n        let height = getValueFromArrayOrNot(aperture_height, i);\n        let area = width * height;\n        nOob = nOob * area / density_unit_area;\n      }\n      let tmpCoherenceMovement = getValueFromArrayOrNot(coherence_movement, i);\n      let tmpOppositeCoherenceMovement = getValueFromArrayOrNot(coherence_movement_opposite, i);\n      let tmpCoherenceOrientation = getValueFromArrayOrNot(coherence_orientation, i);\n      let tmpOppositeCoherenceOrientation = getValueFromArrayOrNot(coherence_orientation_opposite, i);\n      let experimentMode = getValueFromArrayOrNot(experiment_congruency_mode, i);\n      let mainTask = getValueFromArrayOrNot(experiment_main_task, i);\n      let tmpOrientation = [];\n      let tmpMovementDirection = [];\n      if (experimentMode === 0) {\n        let [nCoherentMovement, nCoherentOppositeMovement, nIncoherentMovement] = getNumbers(tmpCoherenceMovement, tmpOppositeCoherenceMovement, nOob);\n        let [nCoherentOrientation, nCoherentOppositeOrientation, nIncoherentOrientation] = getNumbers(tmpCoherenceOrientation, tmpOppositeCoherenceOrientation, nOob);\n        for (let j = 0; j < nCoherentMovement; j++) {\n          tmpMovementDirection.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeMovement; j++) {\n          tmpMovementDirection.push(-1);\n        }\n        for (let j = 0; j < nIncoherentMovement; j++) {\n          tmpMovementDirection.push(0);\n        }\n        for (let j = 0; j < nCoherentOrientation; j++) {\n          tmpOrientation.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeOrientation; j++) {\n          tmpOrientation.push(-1);\n        }\n        for (let j = 0; j < nIncoherentOrientation; j++) {\n          tmpOrientation.push(0);\n        }\n        tmpOrientation = shuffleArray(tmpOrientation);\n        tmpMovementDirection = shuffleArray(tmpMovementDirection);\n      } else if (mainTask === 0) {\n        let [nCoherentMovement, nCoherentOppositeMovement, nIncoherentMovement] = getNumbers(tmpCoherenceMovement, tmpOppositeCoherenceMovement, nOob);\n        let nCoherentOrientation = Math.floor(tmpCoherenceOrientation / 100 * nCoherentMovement);\n        let nCoherentOppositeOrientation = Math.floor(tmpOppositeCoherenceOrientation / 100 * nCoherentMovement);\n        if (tmpCoherenceOrientation + tmpOppositeCoherenceOrientation === 100) {\n          nCoherentOppositeOrientation = nCoherentMovement - nCoherentOrientation;\n        }\n        for (let j = 0; j < nCoherentMovement; j++) {\n          tmpMovementDirection.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeMovement; j++) {\n          tmpMovementDirection.push(-1);\n        }\n        for (let j = 0; j < nIncoherentMovement; j++) {\n          tmpMovementDirection.push(0);\n        }\n        for (let j = 0; j < nCoherentOrientation; j++) {\n          tmpOrientation.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeOrientation; j++) {\n          tmpOrientation.push(-1);\n        }\n        for (let j = 0; j < nOob - (nCoherentOrientation + nCoherentOppositeOrientation); j++) {\n          tmpOrientation.push(0);\n        }\n      } else if (mainTask === 1) {\n        let [nCoherentOrientation, nCoherentOppositeOrientation, nIncoherentOrientation] = getNumbers(tmpCoherenceOrientation, tmpOppositeCoherenceOrientation, nOob);\n        let nCoherentMovement = Math.floor(tmpCoherenceMovement / 100 * nCoherentOrientation);\n        let nCoherentOppositeMovement = Math.floor(tmpOppositeCoherenceMovement / 100 * nCoherentOrientation);\n        if (tmpCoherenceMovement + tmpOppositeCoherenceMovement === 100) {\n          nCoherentOppositeMovement = nCoherentOrientation - nCoherentMovement;\n        }\n        for (let j = 0; j < nCoherentOrientation; j++) {\n          tmpOrientation.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeOrientation; j++) {\n          tmpOrientation.push(-1);\n        }\n        for (let j = 0; j < nIncoherentOrientation; j++) {\n          tmpOrientation.push(0);\n        }\n        for (let j = 0; j < nCoherentMovement; j++) {\n          tmpMovementDirection.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeMovement; j++) {\n          tmpMovementDirection.push(-1);\n        }\n        if (experimentMode === 1) {\n          for (let j = 0; j < nOob - (nCoherentMovement + nCoherentOppositeMovement); j++) {\n            tmpMovementDirection.push(0);\n          }\n        } else {\n          for (let j = 0; j < nOob - (nCoherentMovement + nCoherentOppositeMovement); j++) {\n            tmpOrientation.push(tmpOrientation[j + nCoherentMovement + nCoherentOppositeMovement]);\n          }\n        }\n      }\n      let oobColor = getValueFromArrayOrNot(oob_color, i);\n      let stimulusType = getValueFromArrayOrNot(stimulus_type, i);\n      if (stimulusType === 3) {\n        oobColor = standardColor(oobColor);\n      }\n      let apertureType = getValueFromArrayOrNot(aperture_shape, i);\n      let speed = getValueFromArrayOrNot(movement_speed, i);\n      let speedRandomisation = getValueFromArrayOrNot(movement_speed_randomisation, i);\n      let size = getValueFromArrayOrNot(oob_size, i);\n      let isFade = getValueFromArrayOrNot(fade_out, i);\n      for (let j = 0; j < nOob; j++) {\n        let randomWalk = 0;\n        let randomOrient = 0;\n        let orientation = getValueFromArrayOrNot(coherent_orientation, i);\n        if (tmpOrientation[j] === -1) {\n          orientation += 180;\n        } else if (tmpOrientation[j] === 0) {\n          orientation = Math.floor(Math.random() * 360);\n          randomOrient = getValueFromArrayOrNot(random_orientation_type, i);\n        }\n        let movementDirection = getValueFromArrayOrNot(coherent_movement_direction, i);\n        if (tmpMovementDirection[j] === -1) {\n          movementDirection += 180;\n        } else if (tmpMovementDirection[j] === 0) {\n          movementDirection = Math.floor(Math.random() * 360);\n          randomWalk = getValueFromArrayOrNot(random_movement_type, i);\n        }\n        if (experimentMode === 2 && mainTask === 0 && tmpOrientation[j] === 0 && tmpMovementDirection[j] != 1) {\n          orientation = movementDirection;\n        } else if (experimentMode === 2 && mainTask === 1 && tmpMovementDirection[j] === 0 && tmpOrientation[j] != 1) {\n          movementDirection = orientation;\n        }\n        let oob;\n        let ctx = ctxArray[i];\n        let cvs = canvasArray[i];\n        if (aperture_mode !== \"overlay\") {\n          ctx = ctxArray[0];\n          cvs = canvasArray[0];\n        }\n        if (stimulusType === 0) {\n          oob = new Oob(size, oobColor, orientation, movementDirection, speed, speedRandomisation, apertureType, randomWalk, randomOrient, isFade, cvs, ctx, units);\n        } else if (stimulusType === 1) {\n          oob = new OobCircle(size, oobColor, orientation, movementDirection, speed, speedRandomisation, apertureType, randomWalk, randomOrient, isFade, cvs, ctx, units);\n        } else if (stimulusType === 2) {\n          oob = new OobSquare(size, oobColor, orientation, movementDirection, speed, speedRandomisation, apertureType, randomWalk, randomOrient, isFade, cvs, ctx, units);\n        } else if (stimulusType === 3) {\n          oob = new OobBird(size, oobColor, orientation, movementDirection, speed, speedRandomisation, apertureType, randomWalk, randomOrient, isFade, cvs, ctx, units);\n        } else if (stimulusType === 4) {\n          let imageArray, keyframes, keyframeTime, mirrorType;\n          if (nAperturesTmp === 1) {\n            imageArray = img;\n            keyframes = stimulus_image_keyframes;\n            keyframeTime = stimulus_keyframe_time;\n            mirrorType = stimulus_mirror;\n          } else {\n            imageArray = getValueFromArrayOrNot(img, i);\n            keyframes = getValueFromArrayOrNot(stimulus_image_keyframes, i);\n            keyframeTime = getValueFromArrayOrNot(stimulus_keyframe_time, i);\n            mirrorType = getValueFromArrayOrNot(stimulus_mirror, i);\n          }\n          oob = new OobImage(size, oobColor, orientation, movementDirection, speed, speedRandomisation, apertureType, randomWalk, randomOrient, isFade, imageArray, keyframes, keyframeTime, mirrorType, cvs, ctx, units);\n        }\n        oobs.push(oob);\n      }\n    }\n    oobs = shuffleArray(oobs);\n    //--------RDK variables and function calls end--------\n    //-------------------------------------\n    //-----------FUNCTIONS BEGIN-----------\n    //-------------------------------------\n    //----JsPsych Functions Begin----\n    //Function to start the keyboard listener\n    const startKeyboardListener = () => {\n      //Start the response listener if there are choices for keys\n      if (choices != \"NO_KEYS\") {\n        //Create the keyboard listener to listen for subjects' key response\n        keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: choices,\n          rt_method: \"performance\",\n          persist: false,\n          allow_held_key: false //Only register the key once, after this getKeyboardResponse function is called. (Check JsPsych docs for better info under 'jsPsych.pluginAPI.getKeyboardResponse').\n        });\n      }\n    };\n    //Function to end the trial proper\n    const end_trial = () => {\n      //Stop the dot motion animation\n      stopOobMotion = true;\n      //Store the number of frames\n      numberOfFrames = frameRate.length;\n      //Variable to store the frame rate array\n      let frameRateArray = frameRate;\n      //Calculate the average frame rate\n      if (numberOfFrames > 0) {\n        //Check to make sure that the array is not empty\n        frameRate = frameRate.reduce((total, current) => total + current) / numberOfFrames; //Sum up all the elements in the array\n      } else {\n        frameRate = 0; //Set to zero if the subject presses an answer before a frame is shown (i.e. if frameRate is an empty array)\n      }\n      //Cancel the keyboard listener if keyboardListener has been defined\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n      //Place all the data to be saved from this trial in one data object\n      let trial_data = {\n        rt: response.rt,\n        key_press: response.key,\n        correct: correctOrNot(),\n        choices: choices,\n        correct_choice: correct_choice,\n        trial_duration: trial_duration,\n        response_ends_trial: response_ends_trial,\n        number_of_oobs: number_of_oobs,\n        coherent_movement_direction: coherent_movement_direction,\n        coherence_movement: coherence_movement,\n        opposite_coherence_movement: coherence_movement_opposite,\n        coherent_orientation: coherent_orientation,\n        coherence_orientation: coherence_orientation,\n        opposite_coherence_orientation: coherence_orientation_opposite,\n        movement_speed: movement_speed,\n        oob_size: oob_size,\n        oob_color: oob_color,\n        movement_speed_randomisation: movement_speed_randomisation,\n        aperture_width: aperture_width,\n        aperture_height: aperture_height,\n        background_color: background_color,\n        aperture_background_color: aperture_background_color,\n        frame_rate: frameRate,\n        frame_rate_array: frameRateArray,\n        number_of_frames: numberOfFrames,\n        stimulus_type: stimulus_type,\n        aperture_shape: aperture_shape,\n        random_movemet_type: random_movement_type,\n        random_orientation_type: random_orientation_type,\n        number_of_apertures: number_of_apertures,\n        density_unit_area: density_unit_area,\n        prompt: prompt,\n        aperture_position_left: aperture_position_left,\n        aperture_position_top: aperture_position_top,\n        aperture_mode: aperture_mode\n      };\n      //Clear the body\n      display_element.innerHTML = \"\";\n      //Restore the settings to JsPsych defaults\n      body.style.margin = originalMargin;\n      body.style.padding = originalPadding;\n      body.style.backgroundColor = originalBackgroundColor;\n      //End this trial and move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    }; //End of end_trial\n    //start animation\n    animateDotMotion();\n    //Function to record the first response by the subject\n    function after_response(info) {\n      //If the response has not been recorded, record it\n      if (response.key == \"\") {\n        response = info; //Replace the response object created above\n      }\n      //If the parameter is set such that the response ends the trial, then kill the timeout and end the trial\n      if (response_ends_trial) {\n        window.clearTimeout(timeoutID);\n        end_trial();\n      }\n    } //End of after_response\n    //Function that determines if the response is correct\n    const correctOrNot = () => {\n      //Check that the correct_choice has been defined and that it is an array\n      if (typeof correct_choice !== \"undefined\" && correct_choice.constructor === Array) {\n        if (typeof correct_choice[0] === \"string\" || correct_choice[0] instanceof String) {\n          var key_in_choices = correct_choice.every(x => {\n            return this.jsPsych.pluginAPI.compareKeys(x, response.key);\n          });\n          return key_in_choices; //If the response is included in the correct_choice array, return true. Else, return false.\n        } else if (typeof correct_choice[0] === \"number\") {\n          // the elements are numbers (javascript character codes)\n          console.error(\"Error in ROK plugin: elements in the correct_choice array must be key characters (strings).\");\n          return false; // added due to TS error: not all code paths return a value\n        } else {\n          console.error(\"Error in ROK plugin: elements in the correct_choice array must be key characters (strings).\");\n          return false; // added due to TS error: not all code paths return a value\n        }\n      } else {\n        console.error(\"Error in ROK plugin: you must specify an array of key characters for the correct_choice parameter.\");\n        return false; // added due to TS error: not all code paths return a value\n      }\n    };\n    //Function that clears the dots on the canvas by drawing over it with the color of the baclground\n    function update(deltaTime) {\n      for (let i = 0; i < oobs.length; i++) {\n        oobs[i].update(deltaTime);\n      }\n    }\n    //Draw the dots on the canvas after they're updated\n    function draw() {\n      for (let i = 0; i < canvasArray.length; i++) {\n        ctxArray[i].clearRect(0, 0, canvasArray[i].width, canvasArray[i].height);\n      }\n      for (let i = 0; i < oobs.length; i++) {\n        oobs[i].draw();\n      }\n    } //End of draw\n    //Function to make the dots move on the canvas\n    function animateDotMotion() {\n      let previousTimestamp;\n      let dT = 0;\n      //frameRequestID saves a long integer that is the ID of this frame request. The ID is then used to terminate the request below.\n      let frameRequestID = window.requestAnimationFrame(animate);\n      //Start to listen to subject's key responses\n      startKeyboardListener();\n      //Declare a timestamp\n      function animate() {\n        //If stopping condition has been reached, then stop the animation\n        if (stopOobMotion) {\n          window.cancelAnimationFrame(frameRequestID); //Cancels the frame request\n        }\n        //Else continue with another frame request\n        else {\n          frameRequestID = window.requestAnimationFrame(animate); //Calls for another frame request\n          //If the timer has not been started and it is set, then start the timer\n          if (!timerHasStarted && trial_duration > 0) {\n            //If the trial duration is set, then set a timer to count down and call the end_trial function when the time is up\n            //(If the subject did not press a valid keyboard response within the trial duration, then this will end the trial)\n            timeoutID = window.setTimeout(end_trial, trial_duration); //This timeoutID is then used to cancel the timeout should the subject press a valid key\n            //The timer has started, so we set the variable to true so it does not start more timers\n            timerHasStarted = true;\n          }\n          update(dT);\n          draw(); //Draw each of the dots in their respective apertures\n          //If this is before the first frame, then start the timestamp\n          if (previousTimestamp === undefined) {\n            previousTimestamp = performance.now();\n          }\n          //Else calculate the time and push it into the array\n          else {\n            let currentTimeStamp = performance.now(); //Variable to hold current timestamp\n            if (document.hasFocus()) {\n              dT = currentTimeStamp - previousTimestamp;\n            } else {\n              previousTimestamp = performance.now();\n            }\n            frameRate.push(Math.round(currentTimeStamp - previousTimestamp)); //Push the interval into the frameRate array\n            previousTimestamp = currentTimeStamp; //Reset the timestamp\n          }\n        }\n      }\n    }\n    //----RDK Functions End----\n    //----General Functions Begin//----\n    //Function to assign the default values for the staircase parameters\n    function assignParameterValue(argument, defaultValue) {\n      return typeof argument !== \"undefined\" ? argument : defaultValue;\n    }\n    //----General Functions End//----\n    //-------------------------------------\n    //-----------FUNCTIONS END-------------\n    //-------------------------------------\n  } // END OF TRIAL\n}\nRokPlugin.info = info;\nfunction getValueFromArrayOrNot(arrayOrNot, l) {\n  if (Array.isArray(arrayOrNot)) {\n    return arrayOrNot[l];\n  }\n  return arrayOrNot;\n}\nfunction standardColor(color) {\n  let cvs = document.createElement(\"canvas\");\n  cvs.height = 1;\n  cvs.width = 1;\n  let ctx = cvs.getContext(\"2d\");\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.getImageData(0, 0, 1, 1).data;\n}\nfunction brighten(color, value) {\n  let col = [0, 0, 0, 255];\n  for (let i = 0; i < 3; i++) {\n    let tmp = color[i] + value;\n    tmp = tmp > 255 ? 255 : tmp;\n    tmp = tmp < 0 ? 0 : tmp;\n    col[i] = tmp;\n  }\n  return col;\n}\nfunction byteToHex(num) {\n  // Turns a number (0-255) into a 2-character hex number (00-ff)\n  return (\"0\" + num.toString(16)).slice(-2);\n}\nfunction stdColorToHex(color) {\n  // Convert any CSS color to a hex representation\n  // Examples:\n  // colorToHex('red')            # '#ff0000'\n  // colorToHex('rgb(255, 0, 0)') # '#ff0000'\n  let hex;\n  hex = [0, 1, 2].map(function (idx) {\n    return byteToHex(color[idx]);\n  }).join(\"\");\n  return \"#\" + hex;\n}\nfunction getX(angle) {\n  let rad = angle * Math.PI / 180;\n  return Math.cos(rad);\n}\nfunction getY(angle) {\n  let rad = angle * Math.PI / 180;\n  return -Math.sin(rad);\n}\nfunction getNumbers(per, perOpp, n) {\n  let nC = Math.round(per / 100 * n);\n  let nCO;\n  if (per + perOpp == 100) {\n    nCO = n - nC;\n  } else {\n    nCO = Math.round(perOpp / 100 * n);\n  }\n  let nR = n - nC - nCO;\n  if (nC + nCO > 100 && per == 50) {\n    nC = 100 - nCO;\n  }\n  return [nC, nCO, nR];\n}\nfunction shuffleArray(array) {\n  let curId = array.length;\n  // There remain elements to shuffle\n  while (0 !== curId) {\n    // Pick a remaining element\n    let randId = Math.floor(Math.random() * curId);\n    curId -= 1;\n    // Swap it with the current element.\n    let tmp = array[curId];\n    array[curId] = array[randId];\n    array[randId] = tmp;\n  }\n  return array;\n}\n/// O(rientated) ob(ject)\nclass Oob {\n  constructor(size, color, orientation, movementDirection, speed, randomisation, apertureType, isRandomWalk, isRandomOrientated, isFade, canvas, ctx, units) {\n    this.canvas = canvas;\n    this.size = canvas.width * size / 100;\n    if (units === \"px\") {\n      this.size = size;\n    }\n    this.color = color;\n    this.ctx = ctx;\n    this.pos = {\n      x: 0,\n      y: 0\n    };\n    this.vel = {\n      x: 0,\n      y: 0\n    };\n    if (apertureType == 0) {\n      this.pos.x = Math.random() * canvas.width;\n      this.pos.y = Math.random() * canvas.height;\n    }\n    if (apertureType == 1) {\n      let angle = Math.random() * 2 * Math.PI;\n      let r = Math.sqrt(Math.sqrt(Math.random())) - 0.5;\n      this.pos.x = r * Math.sin(angle) * canvas.width + canvas.width / 2;\n      this.pos.y = r * Math.cos(angle) * canvas.height + canvas.height / 2;\n    }\n    this.speedRes = canvas.width * speed / 100 * (1 + (randomisation / 100 * Math.random() - randomisation / 100));\n    if (units === \"px\") {\n      this.speedRes = speed * (1 + (randomisation / 100 * Math.random() - randomisation / 100));\n    }\n    this.orientation = orientation;\n    this.movementDirection = movementDirection;\n    this.setVel();\n    // corners of triangle rel\n    this.ld = {\n      x: 0,\n      y: 0\n    };\n    this.lu = {\n      x: 0,\n      y: 0\n    };\n    this.r = {\n      x: 0,\n      y: 0\n    };\n    this.setOrient();\n    this.isRandomWalk = isRandomWalk;\n    this.rW = (Math.random() - 0.5) * 10;\n    this.isRandomOrientated = isRandomOrientated;\n    this.rO = (Math.random() - 0.5) * 10;\n    this.apertureType = apertureType;\n    this.timeToChangeMovement = Math.random();\n    this.timeToChangeOrientation = Math.random();\n    this.isFade = isFade;\n    this.alpha = 1;\n  }\n  setVel() {\n    this.vel.x = getX(this.movementDirection) * this.speedRes;\n    this.vel.y = getY(this.movementDirection) * this.speedRes;\n  }\n  setOrient() {\n    this.ld.x = getX(this.orientation + 270) * this.size;\n    this.ld.y = getY(this.orientation + 270) * this.size;\n    this.lu.x = getX(this.orientation + 90) * this.size;\n    this.lu.y = getY(this.orientation + 90) * this.size;\n    this.r.x = getX(this.orientation) * this.size;\n    this.r.y = getY(this.orientation) * this.size;\n  }\n  randomMovement(deltaTime) {\n    this.movementDirection += this.rW * deltaTime / 1000;\n    this.setVel();\n    this.timeToChangeMovement += deltaTime / 1000;\n    let d = 1 - this.timeToChangeMovement;\n    if (d < 0) {\n      this.rW = (Math.random() - 0.5) * 30;\n      this.timeToChangeMovement = -d;\n    }\n  }\n  randomOrientation(deltaTime) {\n    this.orientation += this.rO * deltaTime / 1000;\n    if (this.orientation < 0) {\n      this.orientation = 360 - this.orientation;\n    } else if (this.orientation > 360) {\n      this.orientation = this.orientation - 360;\n    }\n    this.setOrient();\n    this.timeToChangeOrientation += deltaTime / 1000;\n    let d = 1 - this.timeToChangeOrientation;\n    if (d < 0) {\n      this.rO = (Math.random() - 0.5) * 60;\n      this.setOrient();\n      this.timeToChangeOrientation = -d;\n    }\n  }\n  handleOutOfBounds() {\n    if (this.apertureType == 0) {\n      this.alpha = 0.1;\n      if (this.pos.x < -this.size) {\n        this.pos.x = this.canvas.width + this.size;\n      } else if (this.pos.x > this.canvas.width + this.size) {\n        this.pos.x = -this.size;\n      }\n      if (this.pos.y < -this.size) {\n        this.pos.y = this.canvas.height + this.size;\n      } else if (this.pos.y > this.canvas.height + this.size) {\n        this.pos.y = -this.size;\n      }\n      let d = Math.min(this.pos.x - this.size, this.pos.y - this.size, this.canvas.width - (this.pos.x + this.size), this.canvas.height - (this.pos.y + this.size));\n      if (d < this.canvas.width / 20 && this.isFade) {\n        this.alpha = d / (this.canvas.width / 20);\n        if (this.alpha < 0) this.alpha = 0;\n      } else {\n        this.alpha = 1;\n      }\n    }\n    if (this.apertureType == 1) {\n      this.alpha = 0.1;\n      let a = this.canvas.width / 2;\n      let b = this.canvas.height / 2;\n      let x = this.pos.x - a;\n      let y = this.pos.y - b;\n      let d = x * x / (a * a) + y * y / (b * b);\n      if (d > 0.7 && this.isFade) {\n        this.alpha = (1 - d) / 0.3;\n        if (this.alpha < 0) this.alpha = 0;\n      } else {\n        this.alpha = 1;\n      }\n      if (d > 1) {\n        // (a + this.size / 2) * (a + this.size / 2) + (b + this.size / 2) * (b + this.size / 2)) {\n        x *= -0.99;\n        y *= -0.99;\n        this.pos.x = x + a;\n        this.pos.y = y + b;\n      }\n    }\n  }\n  // deltaTime is given in ms!\n  update(deltaTime) {\n    // updatePosition\n    this.pos.x += this.vel.x * deltaTime / 1000;\n    this.pos.y += this.vel.y * deltaTime / 1000;\n    if (this.isRandomWalk) this.randomMovement(deltaTime);\n    if (this.isRandomOrientated) this.randomOrientation(deltaTime);\n    this.handleOutOfBounds();\n  }\n  draw() {\n    this.ctx.globalAlpha = this.alpha;\n    this.ctx.beginPath();\n    let x = this.pos.x + this.ld.x;\n    let y = this.pos.y + this.ld.y;\n    this.ctx.moveTo(x, y);\n    x = this.pos.x + this.lu.x;\n    y = this.pos.y + this.lu.y;\n    this.ctx.lineTo(x, y);\n    x = this.pos.x + this.r.x;\n    y = this.pos.y + this.r.y;\n    this.ctx.lineTo(x, y);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n  }\n}\nclass OobBird extends Oob {\n  constructor(size, color, orientation, movementDirection, speed, randomisation, apertureType, isRandomWalk, isRandomOrientated, isFade, canvas, ctx, units) {\n    super(size, color, orientation, movementDirection, speed, randomisation, apertureType, isRandomWalk, isRandomOrientated, isFade, canvas, ctx, units);\n    this.animationTime = Math.random();\n    this.animationFrame = 4;\n    if (this.animationTime < 0.8) this.animationFrame = 3;\n    if (this.animationTime < 0.6) this.animationFrame = 2;\n    if (this.animationTime < 0.4) this.animationFrame = 1;\n    if (this.animationTime < 0.2) this.animationFrame = 0;\n    this.animationTime *= 0.1;\n    this.animdir = 1;\n    let stdColor = color;\n    this.makeColors(stdColor, orientation);\n  }\n  makeColors(color, orientation) {\n    this.colorsLeft = [];\n    this.colorsRight = [];\n    let brightenStartR = Math.round(-getY(orientation) * 5);\n    let brightenStartL = Math.round(getX(orientation) * 5);\n    let colR = brighten(color, brightenStartR);\n    let colL = brighten(color, brightenStartL);\n    this.colorsRight.push(stdColorToHex(colR));\n    this.colorsLeft.push(stdColorToHex(colL));\n    for (let i = 0; i < 6; i++) {\n      colR = brighten(colR, brightenStartR);\n      colL = brighten(colL, brightenStartL);\n      this.colorsRight.push(stdColorToHex(colR));\n      this.colorsLeft.push(stdColorToHex(colL));\n    }\n  }\n  update(deltaTime) {\n    super.update(deltaTime);\n    this.animationTime += deltaTime / 1000;\n    let d = 0.1 - this.animationTime;\n    if (d < 0) {\n      this.animationFrame += this.animdir;\n      this.animationTime = -d;\n      if (this.animationFrame > 5 || this.animationFrame < 1) {\n        this.animationTime -= 0.1;\n        this.animdir *= -1;\n      }\n    }\n    //this.animationFrame = 5;\n  }\n  draw() {\n    this.ctx.globalAlpha = this.alpha;\n    let px = this.pos.x + 0.2 * this.r.x;\n    let py = this.pos.y + 0.2 * this.r.y;\n    this.ctx.beginPath();\n    this.ctx.moveTo(px, py);\n    let x = this.pos.x + this.ld.x / (this.animationFrame * 0.1 + 1);\n    let y = this.pos.y + this.ld.y / (this.animationFrame * 0.1 + 1);\n    this.ctx.lineTo(x, y);\n    x = this.pos.x + this.r.x;\n    y = this.pos.y + this.r.y;\n    this.ctx.lineTo(x, y);\n    this.ctx.fillStyle = this.colorsRight[this.animationFrame];\n    this.ctx.fill();\n    this.ctx.beginPath();\n    this.ctx.moveTo(px, py);\n    x = this.pos.x + this.lu.x / (this.animationFrame * 0.1 + 1);\n    y = this.pos.y + this.lu.y / (this.animationFrame * 0.1 + 1);\n    this.ctx.lineTo(x, y);\n    x = this.pos.x + this.r.x;\n    y = this.pos.y + this.r.y;\n    this.ctx.lineTo(x, y);\n    this.ctx.fillStyle = this.colorsLeft[this.animationFrame];\n    this.ctx.fill();\n  }\n}\nclass OobCircle extends Oob {\n  draw() {\n    this.ctx.globalAlpha = this.alpha;\n    this.ctx.beginPath();\n    this.ctx.arc(this.pos.x, this.pos.y, this.size / 2, 0, Math.PI * 2);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n  }\n}\nclass OobSquare extends Oob {\n  draw() {\n    this.ctx.globalAlpha = this.alpha;\n    this.ctx.beginPath();\n    let x = this.pos.x - this.size / 2;\n    let y = this.pos.y - this.size / 2;\n    this.ctx.moveTo(x, y);\n    x = this.pos.x + this.size / 2;\n    y = this.pos.y - this.size / 2;\n    this.ctx.lineTo(x, y);\n    x = this.pos.x + this.size / 2;\n    y = this.pos.y + this.size / 2;\n    this.ctx.lineTo(x, y);\n    x = this.pos.x - this.size / 2;\n    y = this.pos.y + this.size / 2;\n    this.ctx.lineTo(x, y);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n  }\n}\nclass OobImage extends Oob {\n  constructor(size, color, orientation, movementDirection, speed, randomisation, apertureType, isRandomWalk, isRandomOrientated, isFade, imageArray, keyframes, keyframeTime, mirrorType, canvas, ctx, units) {\n    super(size, color, orientation, movementDirection, speed, randomisation, apertureType, isRandomWalk, isRandomOrientated, isFade, canvas, ctx, units);\n    if (Array.isArray(imageArray)) {\n      let i = Math.floor(Math.random() * imageArray.length);\n      this.img = imageArray[i];\n      this.keyframes = getValueFromArrayOrNot(keyframes, i);\n      this.keyframeTime = getValueFromArrayOrNot(keyframeTime, i);\n      this.mirrorType = getValueFromArrayOrNot(mirrorType, i);\n    } else {\n      this.img = imageArray;\n      this.keyframes = keyframes;\n      this.keyframeTime = keyframeTime;\n      this.mirrorType = mirrorType;\n    }\n    this.imgWidth = this.img.naturalWidth / this.keyframes;\n    this.imgHeight = this.img.naturalHeight;\n    this.actualKeyframe = Math.floor(Math.random() * this.keyframes);\n    this.animationTime = Math.random() * this.keyframeTime;\n  }\n  update(deltaTime) {\n    super.update(deltaTime);\n    this.animationTime += deltaTime / 1000;\n    let d = this.keyframeTime - this.animationTime;\n    if (d < 0) {\n      this.animationTime = 0;\n      this.actualKeyframe++;\n      if (this.actualKeyframe >= this.keyframes) this.actualKeyframe = 0;\n    }\n  }\n  draw() {\n    this.ctx.globalAlpha = this.alpha;\n    this.ctx.translate(this.pos.x, this.pos.y);\n    if (this.mirrorType === 0) {\n      this.ctx.rotate(-Math.PI * this.orientation / 180);\n    } else if (this.mirrorType == 1) {\n      if (this.orientation > 90 && this.orientation < 270) {\n        this.ctx.rotate(-Math.PI * (this.orientation - 180) / 180);\n      } else {\n        this.ctx.rotate(-Math.PI * this.orientation / 180);\n      }\n    }\n    this.ctx.translate(-this.pos.x, -this.pos.y);\n    if (this.mirrorType === 0) {\n      this.ctx.drawImage(this.img, this.actualKeyframe * this.imgWidth, 0, this.imgWidth, this.imgHeight, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);\n    } else if (this.mirrorType === 1) {\n      if (this.orientation > 90 && this.orientation < 270) {\n        this.ctx.drawImage(this.img, this.actualKeyframe * this.imgWidth, this.imgHeight / 2, this.imgWidth, this.imgHeight / 2, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);\n      } else {\n        this.ctx.drawImage(this.img, this.actualKeyframe * this.imgWidth, 0, this.imgWidth, this.imgHeight / 2, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);\n      }\n    }\n    this.ctx.translate(this.pos.x, this.pos.y);\n    if (this.mirrorType === 0) {\n      this.ctx.rotate(Math.PI * this.orientation / 180);\n    } else if (this.mirrorType === 1) {\n      if (this.orientation > 90 && this.orientation < 270) {\n        this.ctx.rotate(Math.PI * (this.orientation - 180) / 180);\n      } else {\n        this.ctx.rotate(Math.PI * this.orientation / 180);\n      }\n    }\n    this.ctx.translate(-this.pos.x, -this.pos.y);\n  }\n}\nexport { RokPlugin as default };","map":{"version":3,"names":["info","name","parameters","choices","type","ParameterType","KEYS","pretty_name","default","correct_choice","undefined","trial_duration","INT","response_ends_trial","BOOL","number_of_oobs","coherent_movement_direction","coherent_orientation","coherence_movement","coherence_orientation","coherence_movement_opposite","coherence_orientation_opposite","movement_speed","movement_speed_randomisation","oob_size","aperture_width","aperture_height","oob_color","STRING","background_color","border","border_thickness","border_color","stimulus_type","aperture_shape","aperture_background_color","random_movement_type","random_orientation_type","number_of_apertures","density_unit_area","aperture_position_left","aperture_position_top","prompt","fade_out","stimulus_image","IMAGE","background_image","stimulus_image_keyframes","background_image_keyframes","stimulus_keyframe_time","FLOAT","stimulus_mirror","experiment_congruency_mode","experiment_main_task","units","aperture_draw_mode","RokPlugin","constructor","jsPsych","trial","display_element","assignParameterValue","aperture_mode","nApertures","nAperturesTmp","canvasArray","containerArray","i","push","document","createElement","imgPath","getValueFromArrayOrNot","style","backgroundImage","backgroundRepeat","backgroundSize","appendChild","Array","isArray","p","margin","padding","textAlign","innerHTML","position","transform","top","width","body","getElementsByClassName","originalMargin","originalPadding","originalBackgroundColor","backgroundColor","ctxArray","getContext","disp_size","getBoundingClientRect","height","Math","round","toString","left","x","stopOobMotion","timerHasStarted","response","rt","key","timeoutID","keyboardListener","frameRate","numberOfFrames","img","imgSrc","src","j","length","iS","k","oobs","nOob","area","tmpCoherenceMovement","tmpOppositeCoherenceMovement","tmpCoherenceOrientation","tmpOppositeCoherenceOrientation","experimentMode","mainTask","tmpOrientation","tmpMovementDirection","nCoherentMovement","nCoherentOppositeMovement","nIncoherentMovement","getNumbers","nCoherentOrientation","nCoherentOppositeOrientation","nIncoherentOrientation","shuffleArray","floor","oobColor","stimulusType","standardColor","apertureType","speed","speedRandomisation","size","isFade","randomWalk","randomOrient","orientation","random","movementDirection","oob","ctx","cvs","Oob","OobCircle","OobSquare","OobBird","imageArray","keyframes","keyframeTime","mirrorType","OobImage","startKeyboardListener","pluginAPI","getKeyboardResponse","callback_function","after_response","valid_responses","rt_method","persist","allow_held_key","end_trial","frameRateArray","reduce","total","current","cancelKeyboardResponse","trial_data","key_press","correct","correctOrNot","opposite_coherence_movement","opposite_coherence_orientation","frame_rate","frame_rate_array","number_of_frames","random_movemet_type","finishTrial","animateDotMotion","window","clearTimeout","String","key_in_choices","every","compareKeys","console","error","update","deltaTime","draw","clearRect","previousTimestamp","dT","frameRequestID","requestAnimationFrame","animate","cancelAnimationFrame","setTimeout","performance","now","currentTimeStamp","hasFocus","argument","defaultValue","arrayOrNot","l","color","fillStyle","fillRect","getImageData","data","brighten","value","col","tmp","byteToHex","num","slice","stdColorToHex","hex","map","idx","join","getX","angle","rad","PI","cos","getY","sin","per","perOpp","n","nC","nCO","nR","array","curId","randId","randomisation","isRandomWalk","isRandomOrientated","canvas","pos","y","vel","r","sqrt","speedRes","setVel","ld","lu","setOrient","rW","rO","timeToChangeMovement","timeToChangeOrientation","alpha","randomMovement","d","randomOrientation","handleOutOfBounds","min","a","b","globalAlpha","beginPath","moveTo","lineTo","fill","animationTime","animationFrame","animdir","stdColor","makeColors","colorsLeft","colorsRight","brightenStartR","brightenStartL","colR","colL","px","py","arc","imgWidth","naturalWidth","imgHeight","naturalHeight","actualKeyframe","translate","rotate","drawImage"],"sources":["/workspaces/closed-loop-AutoSciDis/closed_loop_autoscidis/testing_zone/node_modules/@jspsych-contrib/plugin-rok/src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"rok\",\n  parameters: {\n    /** The valid keys that the subject can press to indicate a response. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /** The correct keys for that trial. */\n    correct_choice: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Correct choice\",\n      default: undefined,\n    },\n    /** The length of stimulus presentation. Zero for endless loop. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: 0,\n    },\n    /** If true, then any valid key will end the trial. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** The number of oriented objects per set in the stimulus. */\n    number_of_oobs: {\n      type: ParameterType.INT,\n      pretty_name: \"Number of oriented objectes\",\n      default: 300,\n    },\n    /** The direction of coherent motion in degrees (0 degre meaning right). */\n    coherent_movement_direction: {\n      type: ParameterType.INT,\n      pretty_name: \"Coherent movement direction\",\n      default: 0,\n    },\n    /** The orientation of the objects in degree (0 degree meaning right). */\n    coherent_orientation: {\n      type: ParameterType.INT,\n      pretty_name: \"Coherent object orientation\",\n      default: 0,\n    },\n    /** The percentage of oriented objects moving in the coherent direction. */\n    coherence_movement: {\n      type: ParameterType.INT,\n      pretty_name: \"Movement coherence\",\n      default: 50,\n    },\n    /** The percentage of objects that are oriented in the coherent orientation. */\n    coherence_orientation: {\n      type: ParameterType.INT,\n      pretty_name: \"Orientation coherence\",\n      default: 50,\n    },\n    /** The percentage of oriented objects moving in the direction opposite of the coherent direction. */\n    coherence_movement_opposite: {\n      type: ParameterType.INT,\n      pretty_name: \"Opposite movement coherence\",\n      default: 0,\n    },\n    /** The percentage of objects that are oriented opposite of the coherent orientation. */\n    coherence_orientation_opposite: {\n      type: ParameterType.INT,\n      pretty_name: \"Opposite orientation coherence\",\n      default: 0,\n    },\n    /** The movement speed of the oobs in (percentage of aperature_width)/second. */\n    movement_speed: {\n      type: ParameterType.INT,\n      pretty_name: \"Movement Speed\",\n      default: 10,\n    },\n    /** The percentage of randomisation in movement speed \" +\n         \"(0 meaning all orientated objects move with speed defined in movement_speed,\" +\n         \" 100 meaning movement speeds from 0 to 2x movement_speed). */\n    movement_speed_randomisation: {\n      type: ParameterType.INT,\n      pretty_name: \"Movement speed randomisation\",\n      default: 0,\n    },\n    /** The size of the orientated objects in percentage of aperture_width. */\n    oob_size: {\n      type: ParameterType.INT,\n      pretty_name: \"Object size\",\n      default: 2,\n    },\n    /** The width of the aperture in pixels. */\n    aperture_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Aperture width\",\n      default: 600,\n    },\n    /** The height of the aperture in pixels. */\n    aperture_height: {\n      type: ParameterType.INT,\n      pretty_name: \"Aperture height\",\n      default: 400,\n    },\n    /** The color of the dots. */\n    oob_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Dot color\",\n      default: \"white\",\n    },\n    /** The background of the stimulus. */\n    background_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Background color\",\n      default: \"gray\",\n    },\n    /** The presence of a border around the aperture. */\n    border: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Border\",\n      default: false,\n    },\n    /** The thickness of the border in pixels. */\n    border_thickness: {\n      type: ParameterType.INT,\n      pretty_name: \"Border width\",\n      default: 1,\n    },\n    /**The color of the border. */\n    border_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Border Color\",\n      default: 1,\n    },\n    /** Apperance of stimulus (0-triangles, 1-circle, 2-square, 3-origami_birds, 4-image). */\n    stimulus_type: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus type\",\n      default: 0,\n    },\n    /** Shade of aperture (0 - rectangular, 1 - elliptic). */\n    aperture_shape: {\n      type: ParameterType.INT,\n      pretty_name: \"aperture shape\",\n      default: 0,\n    },\n    /** Backgroundcolor of aperture */\n    aperture_background_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Background of aperture\",\n      default: \"#0000\",\n    },\n    /** Type of random movement (0 direction is random but fixed, 1 movement direction of incoherent oobs changes over time). */\n    random_movement_type: {\n      type: ParameterType.INT,\n      pretty_name: \"Random movement type\",\n      default: 0,\n    },\n    /** Type of random movement (0 - orientation is random but fixed, 1 - orientation of incoherent oobs changes over time). */\n    random_orientation_type: {\n      type: ParameterType.INT,\n      pretty_name: \"Random orientation type\",\n      default: 0,\n    },\n    /** Number of apertures. If greater then one, other parameters of trial should be arrays. */\n    number_of_apertures: {\n      type: ParameterType.INT,\n      pretty_name: \"Number of apertures\",\n      default: 1,\n    },\n    /** If this parameter is set, number_of_objects is interpreted as average number_of_objects per density_unit_area (in pixels). */\n    density_unit_area: {\n      type: ParameterType.INT,\n      pretty_name: \"Density area\",\n      default: null,\n    },\n    /** Position of midpoint of aperture in x direction in percentage of window width (50 being middle). */\n    aperture_position_left: {\n      type: ParameterType.INT,\n      pretty_name: \"Horizontal position of aperature\",\n      default: 50,\n    },\n    /** Position of midpoint of aperture in y direction in percentage of window width (0 being top, 50 being middle, 100 being bot). */\n    aperture_position_top: {\n      type: ParameterType.INT,\n      pretty_name: \"Vertical position of aperature\",\n      default: 50,\n    },\n    /** Prompt that is presented above the stimulus. */\n    prompt: {\n      type: ParameterType.STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** Fade the oobs on the edges of the aperture. */\n    fade_out: {\n      type: ParameterType.INT,\n      pretty_name: \"Fade out on edges\",\n      default: 0,\n    },\n    /** Pictures of stimuli, can be key-framed(animated) or randomised, see documentation. */\n    stimulus_image: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Stimuli pictures\",\n      default: null,\n    },\n    /** Background image, can be key-framed(animated) or randomised, see documentation. */\n    background_image: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Background image\",\n      default: null,\n    },\n    /** Number of keyframes in stimulus images. */\n    stimulus_image_keyframes: {\n      type: ParameterType.INT,\n      pretty_name: \"Keyframes of stimulus pictures\",\n      default: 1,\n    },\n    /** Number of keyframes in background pictures. */\n    background_image_keyframes: {\n      type: ParameterType.INT,\n      pretty_name: \"Keframse of background pictures\",\n      default: 1,\n    },\n    /** Time between keyframes. */\n    stimulus_keyframe_time: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Keyframe time\",\n      default: 0.1,\n    },\n    /** Mirror image instead of rotating (1 - x axis, 2 - y axis). */\n    stimulus_mirror: {\n      type: ParameterType.INT,\n      pretty_name: \"Mirror image time\",\n      default: 0,\n    },\n    /** Sets experiment to congruency mode: experiment_main_task has to be  set (0 = movement or 1 = orientation) if this is set to 1 or 2. The\" +\n         \"congruency of the task does only apply to coherent oobs of main task. If this is set to 1 the remaining oobs secondary feature (the non task feature) is set at random.\" +\n         \"If this is set to 2 the remaining oobs have the same direction and orientation .*/\n    experiment_congruency_mode: {\n      type: ParameterType.INT,\n      pretty_name: \"Experiment congruency mode\",\n      default: 0,\n    },\n    /** Sets the main task when experiment is in congruency mode. The congruency of the other task then only\" +\n         \"applies to non random oobs of main task. */\n    experiment_main_task: {\n      type: ParameterType.INT,\n      pretty_name:\n        \"Main task when experiment is set to congruency mode (0- movement, 1-orientation)\",\n      default: 0,\n    },\n    /** Units in which size and speed of oobs is expressed (null - percentage of aperture width, px - pixels). */\n    units: {\n      type: ParameterType.STRING,\n      pretty_name: \"Units in which size and speed of oobs is expressed\",\n      default: null,\n    },\n    /** Should stimuli be drawn on top of each other or intermixed **/\n    aperture_draw_mode: {\n      type: ParameterType.STRING,\n      pretty_name:\n        \"When in overlay draws stimuli of different apertures on top of each other. When in intermixed oobs all show up in one aperture intermixed\",\n      default: \"overlay\",\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **ROK**\n *\n * jsPsych plugin for showing a random object kinematogram stimulus and recording a keyboard response\n *\n * @author Younes Strittmatter\n * @see {@link https://www.jspsych.org/plugins/jspsych-rok/ RDK plugin documentation on jspsych.org}\n * @copyright\n *\n *    We would appreciate it if you cited this paper when you use the ROK:\n *\n * ----------------------\n *\n * Copyright (C) 2021 Younes Strittmatter\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n */\nclass RokPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    //--------------------------------------\n    //---------SET PARAMETERS BEGIN---------\n    //--------------------------------------\n\n    //Note on '||' logical operator: If the first option is 'undefined', it evalutes to 'false' and the second option is returned as the assignment\n    // Note: trial properties are now read-only, so these params have all been changed to separate variables here and throughout trial function\n    var choices = assignParameterValue(trial.choices, []); //info.parameters.choices.default);\n    var correct_choice = assignParameterValue(trial.correct_choice, undefined); //info.parameters.correct_choice.default);\n    var trial_duration = assignParameterValue(trial.trial_duration, 0); //info.parameters.trial_duration.default);\n    var response_ends_trial = assignParameterValue(trial.response_ends_trial, true); //info.parameters.response_ends_trial.default);\n    var number_of_oobs = assignParameterValue(trial.number_of_oobs, 300); //info.parameters.number_of_oobs.default);\n    var coherent_movement_direction = assignParameterValue(trial.coherent_movement_direction, 0); // info.parameters.coherent_movement_direction.default);\n    var coherent_orientation = assignParameterValue(trial.coherent_orientation, 0); // info.parameters.coherent_orientation.default);\n    var coherence_movement = assignParameterValue(trial.coherence_movement, 50); //info.parameters.coherence_movement.default);\n    var coherence_orientation = assignParameterValue(trial.coherence_orientation, 50); //info.parameters.coherence_orientation.default);\n    var coherence_movement_opposite = assignParameterValue(trial.coherence_movement_opposite, 50); //info.parameters.coherence_movement_opposite.default);\n    var coherence_orientation_opposite = assignParameterValue(\n      trial.coherence_orientation_opposite,\n      50\n    ); //info.parameters.coherence_orientation_opposite.default);\n    var movement_speed = assignParameterValue(trial.movement_speed, 10); //info.parameters.movement_speed.default);\n    var movement_speed_randomisation = assignParameterValue(trial.movement_speed_randomisation, 0); // info.parameters.movement_speed_randomisation.default);\n    var oob_size = assignParameterValue(trial.oob_size, 2); //info.parameters.oob_size.default);\n    var aperture_width = assignParameterValue(trial.aperture_width, 600); //info.parameters.aperture_width.default);\n    var aperture_height = assignParameterValue(trial.aperture_height, 400); //info.parameters.aperture_height.default);\n    var oob_color = assignParameterValue(trial.oob_color, \"white\"); //info.parameters.oob_color.default);\n    var background_color = assignParameterValue(trial.background_color, \"gray\"); //info.parameters.background_color.default);\n    var aperture_background_color = assignParameterValue(trial.aperture_background_color, \"#0000\");\n    var border = assignParameterValue(trial.border, false); //info.parameters.border.default);\n    var border_thickness = assignParameterValue(trial.border_thickness, 1); //info.parameters.border_thickness.default);\n    var border_color = assignParameterValue(trial.border_color, \"white\"); //info.parameters.border_color.default);\n    var stimulus_type = assignParameterValue(trial.stimulus_type, 0); //info.parameters.stimulus_type.default);\n    var aperture_shape = assignParameterValue(trial.aperture_shape, 0); //info.parameters.aperture_shape.default);\n    var random_movement_type = assignParameterValue(trial.random_movement_type, 0); //info.parameters.random_movement_type.default);\n    var random_orientation_type = assignParameterValue(trial.random_orientation_type, 0); //info.parameters.random_orientation_type.default);\n    var number_of_apertures = assignParameterValue(trial.number_of_apertures, 1); //info.parameters.number_of_apertures.default);\n    var density_unit_area = assignParameterValue(trial.density_unit_area, null); //info.parameters.number_of_apertures.default);\n    var aperture_position_left = assignParameterValue(trial.aperture_position_left, 50); //info.parameters.aperture_position_left.default);\n    var aperture_position_top = assignParameterValue(trial.aperture_position_top, 50); //info.parameters.aperture_position_top.default);\n    var prompt = assignParameterValue(trial.prompt, null); //info.parameters.prompt.default);\n    var fade_out = assignParameterValue(trial.fade_out, 0); //info.parameters.fade_out.default);\n    var stimulus_image = assignParameterValue(trial.stimulus_image, null); //info.parameters.stimulus_image.default);\n    var background_image = assignParameterValue(trial.background_image, null); //info.parameters.background_image.default);\n    var stimulus_image_keyframes = assignParameterValue(trial.stimulus_image_keyframes, 1); //info.parameters.stimulus_image_keyframes.default);\n    var background_image_keyframes = assignParameterValue(trial.background_image_keyframes, 1); //info.parameters.background_image_keyframes.default);\n    var stimulus_keyframe_time = assignParameterValue(trial.stimulus_keyframe_time, 0.1); //info.parameters.stimulus_keyframe_time.default);\n    var stimulus_mirror = assignParameterValue(trial.stimulus_mirror, 0); //info.parameters.stimulus_mirror.default);\n    var experiment_congruency_mode = assignParameterValue(trial.experiment_congruency_mode, 0); //info.parameters.experiment_congruency_mode.default);\n    var experiment_main_task = assignParameterValue(trial.experiment_main_task, 0); //info.parameters.experiment_main_task.default);\n    var units = assignParameterValue(trial.units, null);\n    var aperture_mode = assignParameterValue(trial.aperture_draw_mode, \"overlay\");\n\n    //--------------------------------------\n    //----------SET PARAMETERS END----------\n    //--------------------------------------\n\n    //--------Set up canvases BEGIN -------\n    let nApertures = number_of_apertures;\n    let nAperturesTmp = nApertures;\n    if (aperture_mode !== \"overlay\") {\n      nApertures = 1;\n    }\n\n    //Create canvas elements and append it to the DOM\n    var canvasArray = [];\n    var containerArray = [];\n    if (nApertures > 1) {\n      for (let i = 0; i < nApertures; i++) {\n        containerArray.push(document.createElement(\"div\"));\n        canvasArray.push(document.createElement(\"canvas\"));\n      }\n    } else {\n      containerArray.push(document.createElement(\"div\"));\n      canvasArray.push(document.createElement(\"canvas\"));\n    }\n    for (let i = 0; i < nApertures; i++) {\n      let imgPath = getValueFromArrayOrNot(background_image, i);\n      if (imgPath != null) {\n        containerArray[i].style.backgroundImage =\n          \"url(\" + getValueFromArrayOrNot(background_image, i) + \")\";\n        containerArray[i].style.backgroundRepeat = \"no-repeat\";\n        containerArray[i].style.backgroundSize = \"cover\";\n      }\n\n      display_element.appendChild(containerArray[i]);\n\n      containerArray[i].appendChild(canvasArray[i]);\n      if (Array.isArray(prompt)) {\n        let p = document.createElement(\"div\");\n        p.style.margin = \"0\";\n        p.style.padding = \"0\";\n        containerArray[i].appendChild(p);\n        p.style.textAlign = \"center\";\n        p.innerHTML = prompt[i];\n        p.style.position = \"absolute\";\n        p.style.transform = \"translate(-50%, 100%)\";\n        p.style.textAlign = \"center\";\n        p.style.top = 10 + getValueFromArrayOrNot(aperture_height, 0) / 2 + \"px\";\n        p.style.width = getValueFromArrayOrNot(aperture_width, 0) + \"px\";\n      }\n    }\n\n    if (prompt != null && !Array.isArray(prompt)) {\n      let p = document.createElement(\"div\");\n      p.style.margin = \"0\";\n      p.style.padding = \"0\";\n      containerArray[0].appendChild(p);\n      p.style.textAlign = \"center\";\n      p.innerHTML = prompt;\n      p.style.position = \"absolute\";\n      p.style.transform = \"translate(-50%, 100%)\";\n      p.style.textAlign = \"center\";\n      p.style.top = 10 + getValueFromArrayOrNot(aperture_height, 0) / 2 + \"px\";\n      p.style.width = getValueFromArrayOrNot(aperture_width, 0) + \"px\";\n    }\n\n    //Get body element from jsPsych\n    let body = document.getElementsByClassName(\"jspsych-display-element\")[0] as HTMLElement;\n\n    //Save the current settings to be restored later\n    let originalMargin = body.style.margin;\n    let originalPadding = body.style.padding;\n    let originalBackgroundColor = body.style.backgroundColor;\n\n    //Remove the margins and paddings of the display_element\n    body.style.margin = \"0\";\n    body.style.padding = \"0\";\n\n    //Remove the margins and padding of the canvas, center it\n    for (let i = 0; i < nApertures; i++) {\n      containerArray[i].style.margin = \"0px\";\n      containerArray[i].style.margin = \"0px\";\n      canvasArray[i].style.margin = \"0px\";\n      canvasArray[i].style.padding = \"0px\";\n      canvasArray[i].style.position = \"absolute\";\n      canvasArray[i].style.transform = \"translate(-50%, -50%)\";\n    }\n\n    //Set background color of body to be the same as\n    body.style.backgroundColor = background_color;\n\n    //Get the contexts of the canvases\n    let ctxArray = [];\n    for (let i = 0; i < nApertures; i++) {\n      ctxArray.push(canvasArray[i].getContext(\"2d\"));\n    }\n\n    // get dimensions of display element\n    const disp_size = body.getBoundingClientRect();\n\n    //Set canvases width, height, position and color;\n    for (let i = 0; i < nApertures; i++) {\n      canvasArray[i].width = getValueFromArrayOrNot(aperture_width, i);\n      canvasArray[i].height = getValueFromArrayOrNot(aperture_height, i);\n      canvasArray[i].style.backgroundColor = getValueFromArrayOrNot(aperture_background_color, i);\n      containerArray[i].style.position = \"absolute\";\n\n      if (Array.isArray(aperture_position_left) && Array.isArray(aperture_position_top)) {\n        // calculate top from display size (resize module doesn't work with top beeing a percentage)\n        let top = Math.round((aperture_position_top[i] * disp_size.height) / 100);\n        containerArray[i].style.top = top.toString() + \"px\";\n\n        containerArray[i].style.left = aperture_position_left[i].toString() + \"%\";\n      } else {\n        if (nApertures > 1) {\n          let x;\n          if (nApertures % 2 == 0) {\n            x = i * (100 / nApertures) + 100 / (2 * nApertures);\n          } else {\n            x = i * (100 / (nApertures + 1)) + 100 / (2 * (nApertures - 1));\n          }\n\n          // calculate top from display size (resize module doesn't work with top being a percentage)\n          let top = Math.round((aperture_position_top * disp_size.height) / 100);\n          containerArray[i].style.top = top.toString() + \"px\";\n\n          containerArray[i].style.left = x.toString() + \"%\";\n        } else {\n          // calculate top from display size (resize module doesn't work with top being a percentage)\n          let top = Math.round((aperture_position_top * disp_size.height) / 100);\n          containerArray[i].style.top = top.toString() + \"px\";\n\n          containerArray[i].style.left = aperture_position_left.toString() + \"%\";\n        }\n      }\n    }\n\n    //--------Set up canvases END-------\n\n    //--------rok variables and function calls begin--------\n\n    //Initialize stopping condition for animation function that runs in a loop\n    let stopOobMotion = false;\n\n    //Variable to control the frame rate, to ensure that the first frame is skipped because it follows a different timing\n    let firstFrame = true;\n\n    //Variable to start the timer\n    let timerHasStarted = false;\n\n    //Initialize object to store the response data. Default values of -1 are used if the trial times out and the subject has not pressed a valid key\n    let response = {\n      rt: -1,\n      key: \"\",\n    };\n\n    //Declare a global timeout ID to be initialized below in animateDotMotion function and to be used in after_response function\n    let timeoutID;\n\n    //Declare global variable to be defined in startKeyboardListener function and to be used in end_trial function\n    let keyboardListener;\n\n    //Declare global variable to store the frame rate of the trial\n    var frameRate: number | number[] = []; //How often the monitor refreshes, in ms. Currently an array to store all the intervals. Will be converted into a single number (the average) in end_trial function.\n\n    //variable to store how many frames were presented.\n    let numberOfFrames = 0;\n\n    // get the images if specified\n    let img = [];\n    if (stimulus_image != null) {\n      let imgSrc = stimulus_image;\n      if (!Array.isArray(imgSrc)) {\n        let i = document.createElement(\"img\");\n        i.src = imgSrc;\n        img.push(i);\n      } else {\n        for (let j = 0; j < imgSrc.length; j++) {\n          let iS = imgSrc[j];\n          if (!Array.isArray(iS)) {\n            let i = document.createElement(\"img\");\n            i.src = iS;\n            img.push(i);\n          } else {\n            let i = [];\n            for (let k = 0; k < iS[j].length; k++) {\n              let p = document.createElement(\"img\");\n              p.src = iS[k];\n              i.push(p);\n            }\n            img.push(i);\n          }\n        }\n      }\n    }\n\n    let oobs = [];\n\n    //Calculate the number of coherent, opposite coherent, and incoherent oobs for movement/orientation\n    for (let i = 0; i < nAperturesTmp; i++) {\n      let nOob = getValueFromArrayOrNot(number_of_oobs, i);\n\n      // set number of objects, if density_unit_area is set\n      if (density_unit_area != null) {\n        let width = getValueFromArrayOrNot(aperture_width, i);\n        let height = getValueFromArrayOrNot(aperture_height, i);\n        let area = width * height;\n        nOob = (nOob * area) / density_unit_area;\n      }\n\n      let tmpCoherenceMovement = getValueFromArrayOrNot(coherence_movement, i);\n      let tmpOppositeCoherenceMovement = getValueFromArrayOrNot(coherence_movement_opposite, i);\n      let tmpCoherenceOrientation = getValueFromArrayOrNot(coherence_orientation, i);\n      let tmpOppositeCoherenceOrientation = getValueFromArrayOrNot(\n        coherence_orientation_opposite,\n        i\n      );\n\n      let experimentMode = getValueFromArrayOrNot(experiment_congruency_mode, i);\n      let mainTask = getValueFromArrayOrNot(experiment_main_task, i);\n\n      let tmpOrientation = [];\n      let tmpMovementDirection = [];\n\n      if (experimentMode === 0) {\n        let [nCoherentMovement, nCoherentOppositeMovement, nIncoherentMovement] = getNumbers(\n          tmpCoherenceMovement,\n          tmpOppositeCoherenceMovement,\n          nOob\n        );\n        let [nCoherentOrientation, nCoherentOppositeOrientation, nIncoherentOrientation] =\n          getNumbers(tmpCoherenceOrientation, tmpOppositeCoherenceOrientation, nOob);\n        for (let j = 0; j < nCoherentMovement; j++) {\n          tmpMovementDirection.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeMovement; j++) {\n          tmpMovementDirection.push(-1);\n        }\n        for (let j = 0; j < nIncoherentMovement; j++) {\n          tmpMovementDirection.push(0);\n        }\n        for (let j = 0; j < nCoherentOrientation; j++) {\n          tmpOrientation.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeOrientation; j++) {\n          tmpOrientation.push(-1);\n        }\n        for (let j = 0; j < nIncoherentOrientation; j++) {\n          tmpOrientation.push(0);\n        }\n        tmpOrientation = shuffleArray(tmpOrientation);\n        tmpMovementDirection = shuffleArray(tmpMovementDirection);\n      } else if (mainTask === 0) {\n        let [nCoherentMovement, nCoherentOppositeMovement, nIncoherentMovement] = getNumbers(\n          tmpCoherenceMovement,\n          tmpOppositeCoherenceMovement,\n          nOob\n        );\n        let nCoherentOrientation = Math.floor((tmpCoherenceOrientation / 100) * nCoherentMovement);\n        let nCoherentOppositeOrientation = Math.floor(\n          (tmpOppositeCoherenceOrientation / 100) * nCoherentMovement\n        );\n        if (tmpCoherenceOrientation + tmpOppositeCoherenceOrientation === 100) {\n          nCoherentOppositeOrientation = nCoherentMovement - nCoherentOrientation;\n        }\n        for (let j = 0; j < nCoherentMovement; j++) {\n          tmpMovementDirection.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeMovement; j++) {\n          tmpMovementDirection.push(-1);\n        }\n        for (let j = 0; j < nIncoherentMovement; j++) {\n          tmpMovementDirection.push(0);\n        }\n        for (let j = 0; j < nCoherentOrientation; j++) {\n          tmpOrientation.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeOrientation; j++) {\n          tmpOrientation.push(-1);\n        }\n\n        for (let j = 0; j < nOob - (nCoherentOrientation + nCoherentOppositeOrientation); j++) {\n          tmpOrientation.push(0);\n        }\n      } else if (mainTask === 1) {\n        let [nCoherentOrientation, nCoherentOppositeOrientation, nIncoherentOrientation] =\n          getNumbers(tmpCoherenceOrientation, tmpOppositeCoherenceOrientation, nOob);\n        let nCoherentMovement = Math.floor((tmpCoherenceMovement / 100) * nCoherentOrientation);\n        let nCoherentOppositeMovement = Math.floor(\n          (tmpOppositeCoherenceMovement / 100) * nCoherentOrientation\n        );\n        if (tmpCoherenceMovement + tmpOppositeCoherenceMovement === 100) {\n          nCoherentOppositeMovement = nCoherentOrientation - nCoherentMovement;\n        }\n        for (let j = 0; j < nCoherentOrientation; j++) {\n          tmpOrientation.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeOrientation; j++) {\n          tmpOrientation.push(-1);\n        }\n        for (let j = 0; j < nIncoherentOrientation; j++) {\n          tmpOrientation.push(0);\n        }\n        for (let j = 0; j < nCoherentMovement; j++) {\n          tmpMovementDirection.push(1);\n        }\n        for (let j = 0; j < nCoherentOppositeMovement; j++) {\n          tmpMovementDirection.push(-1);\n        }\n        if (experimentMode === 1) {\n          for (let j = 0; j < nOob - (nCoherentMovement + nCoherentOppositeMovement); j++) {\n            tmpMovementDirection.push(0);\n          }\n        } else {\n          for (let j = 0; j < nOob - (nCoherentMovement + nCoherentOppositeMovement); j++) {\n            tmpOrientation.push(tmpOrientation[j + nCoherentMovement + nCoherentOppositeMovement]);\n          }\n        }\n      }\n\n      let oobColor = getValueFromArrayOrNot(oob_color, i);\n\n      let stimulusType = getValueFromArrayOrNot(stimulus_type, i);\n      if (stimulusType === 3) {\n        oobColor = standardColor(oobColor);\n      }\n      let apertureType = getValueFromArrayOrNot(aperture_shape, i);\n      let speed = getValueFromArrayOrNot(movement_speed, i);\n      let speedRandomisation = getValueFromArrayOrNot(movement_speed_randomisation, i);\n      let size = getValueFromArrayOrNot(oob_size, i);\n\n      let isFade = getValueFromArrayOrNot(fade_out, i);\n\n      for (let j = 0; j < nOob; j++) {\n        let randomWalk = 0;\n        let randomOrient = 0;\n        let orientation = getValueFromArrayOrNot(coherent_orientation, i);\n        if (tmpOrientation[j] === -1) {\n          orientation += 180;\n        } else if (tmpOrientation[j] === 0) {\n          orientation = Math.floor(Math.random() * 360);\n          randomOrient = getValueFromArrayOrNot(random_orientation_type, i);\n        }\n        let movementDirection = getValueFromArrayOrNot(coherent_movement_direction, i);\n        if (tmpMovementDirection[j] === -1) {\n          movementDirection += 180;\n        } else if (tmpMovementDirection[j] === 0) {\n          movementDirection = Math.floor(Math.random() * 360);\n          randomWalk = getValueFromArrayOrNot(random_movement_type, i);\n        }\n        if (\n          experimentMode === 2 &&\n          mainTask === 0 &&\n          tmpOrientation[j] === 0 &&\n          tmpMovementDirection[j] != 1\n        ) {\n          orientation = movementDirection;\n        } else if (\n          experimentMode === 2 &&\n          mainTask === 1 &&\n          tmpMovementDirection[j] === 0 &&\n          tmpOrientation[j] != 1\n        ) {\n          movementDirection = orientation;\n        }\n\n        let oob;\n\n        let ctx = ctxArray[i];\n        let cvs = canvasArray[i];\n        if (aperture_mode !== \"overlay\") {\n          ctx = ctxArray[0];\n          cvs = canvasArray[0];\n        }\n\n        if (stimulusType === 0) {\n          oob = new Oob(\n            size,\n            oobColor,\n            orientation,\n            movementDirection,\n            speed,\n            speedRandomisation,\n            apertureType,\n            randomWalk,\n            randomOrient,\n            isFade,\n            cvs,\n            ctx,\n            units\n          );\n        } else if (stimulusType === 1) {\n          oob = new OobCircle(\n            size,\n            oobColor,\n            orientation,\n            movementDirection,\n            speed,\n            speedRandomisation,\n            apertureType,\n            randomWalk,\n            randomOrient,\n            isFade,\n            cvs,\n            ctx,\n            units\n          );\n        } else if (stimulusType === 2) {\n          oob = new OobSquare(\n            size,\n            oobColor,\n            orientation,\n            movementDirection,\n            speed,\n            speedRandomisation,\n            apertureType,\n            randomWalk,\n            randomOrient,\n            isFade,\n            cvs,\n            ctx,\n            units\n          );\n        } else if (stimulusType === 3) {\n          oob = new OobBird(\n            size,\n            oobColor,\n            orientation,\n            movementDirection,\n            speed,\n            speedRandomisation,\n            apertureType,\n            randomWalk,\n            randomOrient,\n            isFade,\n            cvs,\n            ctx,\n            units\n          );\n        } else if (stimulusType === 4) {\n          let imageArray, keyframes, keyframeTime, mirrorType;\n          if (nAperturesTmp === 1) {\n            imageArray = img;\n            keyframes = stimulus_image_keyframes;\n            keyframeTime = stimulus_keyframe_time;\n            mirrorType = stimulus_mirror;\n          } else {\n            imageArray = getValueFromArrayOrNot(img, i);\n            keyframes = getValueFromArrayOrNot(stimulus_image_keyframes, i);\n            keyframeTime = getValueFromArrayOrNot(stimulus_keyframe_time, i);\n            mirrorType = getValueFromArrayOrNot(stimulus_mirror, i);\n          }\n\n          oob = new OobImage(\n            size,\n            oobColor,\n            orientation,\n            movementDirection,\n            speed,\n            speedRandomisation,\n            apertureType,\n            randomWalk,\n            randomOrient,\n            isFade,\n            imageArray,\n            keyframes,\n            keyframeTime,\n            mirrorType,\n            cvs,\n            ctx,\n            units\n          );\n        }\n        oobs.push(oob);\n      }\n    }\n\n    oobs = shuffleArray(oobs);\n\n    //--------RDK variables and function calls end--------\n\n    //-------------------------------------\n    //-----------FUNCTIONS BEGIN-----------\n    //-------------------------------------\n\n    //----JsPsych Functions Begin----\n\n    //Function to start the keyboard listener\n    const startKeyboardListener = () => {\n      //Start the response listener if there are choices for keys\n      if (choices != \"NO_KEYS\") {\n        //Create the keyboard listener to listen for subjects' key response\n        keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response, //Function to call once the subject presses a valid key\n          valid_responses: choices, //The keys that will be considered a valid response and cause the callback function to be called\n          rt_method: \"performance\", //The type of method to record timing information.\n          persist: false, //If set to false, keyboard listener will only trigger the first time a valid key is pressed. If set to true, it has to be explicitly cancelled by the cancelKeyboardResponse plugin API.\n          allow_held_key: false, //Only register the key once, after this getKeyboardResponse function is called. (Check JsPsych docs for better info under 'jsPsych.pluginAPI.getKeyboardResponse').\n        });\n      }\n    };\n\n    //Function to end the trial proper\n    const end_trial = () => {\n      //Stop the dot motion animation\n      stopOobMotion = true;\n\n      //Store the number of frames\n      numberOfFrames = (frameRate as number[]).length;\n\n      //Variable to store the frame rate array\n      let frameRateArray = frameRate;\n\n      //Calculate the average frame rate\n      if (numberOfFrames > 0) {\n        //Check to make sure that the array is not empty\n        frameRate =\n          (frameRate as number[]).reduce((total, current) => total + current) / numberOfFrames; //Sum up all the elements in the array\n      } else {\n        frameRate = 0; //Set to zero if the subject presses an answer before a frame is shown (i.e. if frameRate is an empty array)\n      }\n\n      //Cancel the keyboard listener if keyboardListener has been defined\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      //Place all the data to be saved from this trial in one data object\n      let trial_data = {\n        rt: response.rt, //The response time\n        key_press: response.key, //The key that the subject pressed\n        correct: correctOrNot(), //If the subject response was correct\n        choices: choices, //The set of valid keys\n        correct_choice: correct_choice, //The correct choice\n        trial_duration: trial_duration, //The trial duration\n        response_ends_trial: response_ends_trial, //If the response ends the trial\n        number_of_oobs: number_of_oobs,\n        coherent_movement_direction: coherent_movement_direction,\n        coherence_movement: coherence_movement,\n        opposite_coherence_movement: coherence_movement_opposite,\n        coherent_orientation: coherent_orientation,\n        coherence_orientation: coherence_orientation,\n        opposite_coherence_orientation: coherence_orientation_opposite,\n        movement_speed: movement_speed,\n        oob_size: oob_size,\n        oob_color: oob_color,\n        movement_speed_randomisation: movement_speed_randomisation,\n        aperture_width: aperture_width,\n        aperture_height: aperture_height,\n        background_color: background_color,\n        aperture_background_color: aperture_background_color,\n        frame_rate: frameRate, //The average frame rate for the trial\n        frame_rate_array: frameRateArray, //The array of ms per frame in this trial, in the form of a JSON string\n        number_of_frames: numberOfFrames, //The number of frames in this trial\n        stimulus_type: stimulus_type,\n        aperture_shape: aperture_shape,\n        random_movemet_type: random_movement_type,\n        random_orientation_type: random_orientation_type,\n        number_of_apertures: number_of_apertures,\n        density_unit_area: density_unit_area,\n        prompt: prompt,\n        aperture_position_left: aperture_position_left,\n        aperture_position_top: aperture_position_top,\n        aperture_mode: aperture_mode,\n      };\n\n      //Clear the body\n      display_element.innerHTML = \"\";\n\n      //Restore the settings to JsPsych defaults\n      body.style.margin = originalMargin;\n      body.style.padding = originalPadding;\n      body.style.backgroundColor = originalBackgroundColor;\n\n      //End this trial and move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    }; //End of end_trial\n\n    //start animation\n    animateDotMotion();\n\n    //Function to record the first response by the subject\n    function after_response(info) {\n      //If the response has not been recorded, record it\n      if (response.key == \"\") {\n        response = info; //Replace the response object created above\n      }\n\n      //If the parameter is set such that the response ends the trial, then kill the timeout and end the trial\n      if (response_ends_trial) {\n        window.clearTimeout(timeoutID);\n        end_trial();\n      }\n    } //End of after_response\n\n    //Function that determines if the response is correct\n    const correctOrNot = () => {\n      //Check that the correct_choice has been defined and that it is an array\n      if (typeof correct_choice !== \"undefined\" && correct_choice.constructor === Array) {\n        if (typeof correct_choice[0] === \"string\" || correct_choice[0] instanceof String) {\n          var key_in_choices = correct_choice.every((x: string) => {\n            return this.jsPsych.pluginAPI.compareKeys(x, response.key);\n          });\n          return key_in_choices; //If the response is included in the correct_choice array, return true. Else, return false.\n        } else if (typeof correct_choice[0] === \"number\") {\n          // the elements are numbers (javascript character codes)\n          console.error(\n            \"Error in ROK plugin: elements in the correct_choice array must be key characters (strings).\"\n          );\n          return false; // added due to TS error: not all code paths return a value\n        } else {\n          console.error(\n            \"Error in ROK plugin: elements in the correct_choice array must be key characters (strings).\"\n          );\n          return false; // added due to TS error: not all code paths return a value\n        }\n      } else {\n        console.error(\n          \"Error in ROK plugin: you must specify an array of key characters for the correct_choice parameter.\"\n        );\n        return false; // added due to TS error: not all code paths return a value\n      }\n    };\n\n    //Function that clears the dots on the canvas by drawing over it with the color of the baclground\n\n    function update(deltaTime) {\n      for (let i = 0; i < oobs.length; i++) {\n        oobs[i].update(deltaTime);\n      }\n    }\n\n    //Draw the dots on the canvas after they're updated\n    function draw() {\n      for (let i = 0; i < canvasArray.length; i++) {\n        ctxArray[i].clearRect(0, 0, canvasArray[i].width, canvasArray[i].height);\n      }\n      for (let i = 0; i < oobs.length; i++) {\n        oobs[i].draw();\n      }\n    } //End of draw\n\n    //Function to make the dots move on the canvas\n    function animateDotMotion() {\n      let previousTimestamp;\n      let dT = 0;\n      //frameRequestID saves a long integer that is the ID of this frame request. The ID is then used to terminate the request below.\n      let frameRequestID = window.requestAnimationFrame(animate);\n\n      //Start to listen to subject's key responses\n      startKeyboardListener();\n\n      //Declare a timestamp\n\n      function animate() {\n        //If stopping condition has been reached, then stop the animation\n        if (stopOobMotion) {\n          window.cancelAnimationFrame(frameRequestID); //Cancels the frame request\n        }\n        //Else continue with another frame request\n        else {\n          frameRequestID = window.requestAnimationFrame(animate); //Calls for another frame request\n\n          //If the timer has not been started and it is set, then start the timer\n          if (!timerHasStarted && trial_duration > 0) {\n            //If the trial duration is set, then set a timer to count down and call the end_trial function when the time is up\n            //(If the subject did not press a valid keyboard response within the trial duration, then this will end the trial)\n            timeoutID = window.setTimeout(end_trial, trial_duration); //This timeoutID is then used to cancel the timeout should the subject press a valid key\n            //The timer has started, so we set the variable to true so it does not start more timers\n            timerHasStarted = true;\n          }\n\n          update(dT);\n\n          draw(); //Draw each of the dots in their respective apertures\n\n          //If this is before the first frame, then start the timestamp\n          if (previousTimestamp === undefined) {\n            previousTimestamp = performance.now();\n          }\n          //Else calculate the time and push it into the array\n          else {\n            let currentTimeStamp = performance.now(); //Variable to hold current timestamp\n            if (document.hasFocus()) {\n              dT = currentTimeStamp - previousTimestamp;\n            } else {\n              previousTimestamp = performance.now();\n            }\n\n            (frameRate as number[]).push(Math.round(currentTimeStamp - previousTimestamp)); //Push the interval into the frameRate array\n            previousTimestamp = currentTimeStamp; //Reset the timestamp\n          }\n        }\n      }\n    }\n\n    //----RDK Functions End----\n\n    //----General Functions Begin//----\n\n    //Function to assign the default values for the staircase parameters\n    function assignParameterValue(argument, defaultValue) {\n      return typeof argument !== \"undefined\" ? argument : defaultValue;\n    }\n\n    //----General Functions End//----\n\n    //-------------------------------------\n    //-----------FUNCTIONS END-------------\n    //-------------------------------------\n  } // END OF TRIAL\n}\n\n//Return the plugin object which contains the trial\n//----RDK Functions End----\n\n//----General Functions Begin//----\n\n//Function to assign the default values for the staircase parameters\n\n//----General Functions End//----\n\n//-------------------------------------\n//-----------FUNCTIONS END-------------\n//-------------------------------------\n\nexport default RokPlugin;\n\nfunction getValueFromArrayOrNot(arrayOrNot, l) {\n  if (Array.isArray(arrayOrNot)) {\n    return arrayOrNot[l];\n  }\n  return arrayOrNot;\n}\n\nfunction standardColor(color) {\n  let cvs = document.createElement(\"canvas\");\n  cvs.height = 1;\n  cvs.width = 1;\n  let ctx = cvs.getContext(\"2d\");\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.getImageData(0, 0, 1, 1).data;\n}\n\nfunction brighten(color, value) {\n  let col = [0, 0, 0, 255];\n  for (let i = 0; i < 3; i++) {\n    let tmp = color[i] + value;\n    tmp = tmp > 255 ? 255 : tmp;\n    tmp = tmp < 0 ? 0 : tmp;\n    col[i] = tmp;\n  }\n  return col;\n}\n\nfunction byteToHex(num) {\n  // Turns a number (0-255) into a 2-character hex number (00-ff)\n  return (\"0\" + num.toString(16)).slice(-2);\n}\n\nfunction stdColorToHex(color) {\n  // Convert any CSS color to a hex representation\n  // Examples:\n  // colorToHex('red')            # '#ff0000'\n  // colorToHex('rgb(255, 0, 0)') # '#ff0000'\n  let hex;\n  hex = [0, 1, 2]\n    .map(function (idx) {\n      return byteToHex(color[idx]);\n    })\n    .join(\"\");\n  return \"#\" + hex;\n}\n\nfunction getX(angle) {\n  let rad = (angle * Math.PI) / 180;\n  return Math.cos(rad);\n}\n\nfunction getY(angle) {\n  let rad = (angle * Math.PI) / 180;\n  return -Math.sin(rad);\n}\n\nfunction getNumbers(per, perOpp, n) {\n  let nC = Math.round((per / 100) * n);\n  let nCO;\n  if (per + perOpp == 100) {\n    nCO = n - nC;\n  } else {\n    nCO = Math.round((perOpp / 100) * n);\n  }\n  let nR = n - nC - nCO;\n  if (nC + nCO > 100 && per == 50) {\n    nC = 100 - nCO;\n  }\n  return [nC, nCO, nR];\n}\n\nfunction shuffleArray(array) {\n  let curId = array.length;\n  // There remain elements to shuffle\n  while (0 !== curId) {\n    // Pick a remaining element\n    let randId = Math.floor(Math.random() * curId);\n    curId -= 1;\n    // Swap it with the current element.\n    let tmp = array[curId];\n    array[curId] = array[randId];\n    array[randId] = tmp;\n  }\n  return array;\n}\n\nfunction shuffleArraysParalell(arrays) {\n  for (let j = arrays[0].length - 1; j > 0; j--) {\n    for (let i = 0; i < arrays.length; i++) {\n      const k = Math.floor(Math.random() * (j + 1));\n      [arrays[i][j], arrays[i][k]] = [arrays[i][k], arrays[i][j]];\n    }\n  }\n}\n\nfunction getOffset(el) {\n  const rect = el.getBoundingClientRect();\n  return {\n    left: rect.left + window.scrollX,\n    top: rect.top + window.scrollY,\n  };\n}\n\n/// O(rientated) ob(ject)\nclass Oob {\n  protected canvas: any;\n  protected size: number;\n  protected color: any;\n  protected ctx: any;\n  protected pos: {\n    y: number;\n    x: number;\n  };\n  protected vel: {\n    x: number;\n    y: number;\n  };\n  protected alpha: number;\n  protected speedRes: number;\n  protected orientation: any;\n  protected movementDirection: any;\n  protected ld: {\n    y: number;\n    x: number;\n  };\n  protected lu: {\n    y: number;\n    x: number;\n  };\n  protected r: {\n    y: number;\n    x: number;\n  };\n  protected isRandomWalk: any;\n  protected rW: number;\n  protected rO: number;\n  protected isRandomOrientated: any;\n  protected apertureType: any;\n  protected timeToChangeMovement: number;\n  protected timeToChangeOrientation: number;\n  protected isFade: any;\n\n  constructor(\n    size,\n    color,\n    orientation,\n    movementDirection,\n    speed,\n    randomisation,\n    apertureType,\n    isRandomWalk,\n    isRandomOrientated,\n    isFade,\n    canvas,\n    ctx,\n    units\n  ) {\n    this.canvas = canvas;\n    if (units === \"px\") {\n    }\n    this.size = (canvas.width * size) / 100;\n    if (units === \"px\") {\n      this.size = size;\n    }\n    this.color = color;\n    this.ctx = ctx;\n    this.pos = { x: 0, y: 0 };\n    this.vel = { x: 0, y: 0 };\n    if (apertureType == 0) {\n      this.pos.x = Math.random() * canvas.width;\n      this.pos.y = Math.random() * canvas.height;\n    }\n    if (apertureType == 1) {\n      let angle = Math.random() * 2 * Math.PI;\n      let r = Math.sqrt(Math.sqrt(Math.random())) - 0.5;\n      this.pos.x = r * Math.sin(angle) * canvas.width + canvas.width / 2;\n      this.pos.y = r * Math.cos(angle) * canvas.height + canvas.height / 2;\n    }\n    this.speedRes =\n      ((canvas.width * speed) / 100) *\n      (1 + ((randomisation / 100) * Math.random() - randomisation / 100));\n    if (units === \"px\") {\n      this.speedRes = speed * (1 + ((randomisation / 100) * Math.random() - randomisation / 100));\n    }\n    this.orientation = orientation;\n    this.movementDirection = movementDirection;\n    this.setVel();\n    // corners of triangle rel\n    this.ld = { x: 0, y: 0 };\n    this.lu = { x: 0, y: 0 };\n    this.r = { x: 0, y: 0 };\n    this.setOrient();\n    this.isRandomWalk = isRandomWalk;\n    this.rW = (Math.random() - 0.5) * 10;\n    this.isRandomOrientated = isRandomOrientated;\n    this.rO = (Math.random() - 0.5) * 10;\n    this.apertureType = apertureType;\n    this.timeToChangeMovement = Math.random();\n    this.timeToChangeOrientation = Math.random();\n    this.isFade = isFade;\n    this.alpha = 1;\n  }\n\n  setVel() {\n    this.vel.x = getX(this.movementDirection) * this.speedRes;\n    this.vel.y = getY(this.movementDirection) * this.speedRes;\n  }\n\n  setOrient() {\n    this.ld.x = getX(this.orientation + 270) * this.size;\n    this.ld.y = getY(this.orientation + 270) * this.size;\n    this.lu.x = getX(this.orientation + 90) * this.size;\n    this.lu.y = getY(this.orientation + 90) * this.size;\n    this.r.x = getX(this.orientation) * this.size;\n    this.r.y = getY(this.orientation) * this.size;\n  }\n\n  randomMovement(deltaTime) {\n    this.movementDirection += (this.rW * deltaTime) / 1000;\n    this.setVel();\n    this.timeToChangeMovement += deltaTime / 1000;\n    let d = 1 - this.timeToChangeMovement;\n    if (d < 0) {\n      this.rW = (Math.random() - 0.5) * 30;\n      this.timeToChangeMovement = -d;\n    }\n  }\n\n  randomOrientation(deltaTime) {\n    this.orientation += (this.rO * deltaTime) / 1000;\n    if (this.orientation < 0) {\n      this.orientation = 360 - this.orientation;\n    } else if (this.orientation > 360) {\n      this.orientation = this.orientation - 360;\n    }\n    this.setOrient();\n    this.timeToChangeOrientation += deltaTime / 1000;\n    let d = 1 - this.timeToChangeOrientation;\n    if (d < 0) {\n      this.rO = (Math.random() - 0.5) * 60;\n      this.setOrient();\n      this.timeToChangeOrientation = -d;\n    }\n  }\n\n  handleOutOfBounds() {\n    if (this.apertureType == 0) {\n      this.alpha = 0.1;\n      if (this.pos.x < -this.size) {\n        this.pos.x = this.canvas.width + this.size;\n      } else if (this.pos.x > this.canvas.width + this.size) {\n        this.pos.x = -this.size;\n      }\n      if (this.pos.y < -this.size) {\n        this.pos.y = this.canvas.height + this.size;\n      } else if (this.pos.y > this.canvas.height + this.size) {\n        this.pos.y = -this.size;\n      }\n      let d = Math.min(\n        this.pos.x - this.size,\n        this.pos.y - this.size,\n        this.canvas.width - (this.pos.x + this.size),\n        this.canvas.height - (this.pos.y + this.size)\n      );\n      if (d < this.canvas.width / 20 && this.isFade) {\n        this.alpha = d / (this.canvas.width / 20);\n        if (this.alpha < 0) this.alpha = 0;\n      } else {\n        this.alpha = 1;\n      }\n    }\n    if (this.apertureType == 1) {\n      this.alpha = 0.1;\n      let a = this.canvas.width / 2;\n      let b = this.canvas.height / 2;\n      let x = this.pos.x - a;\n      let y = this.pos.y - b;\n      let d = (x * x) / (a * a) + (y * y) / (b * b);\n      if (d > 0.7 && this.isFade) {\n        this.alpha = (1 - d) / 0.3;\n        if (this.alpha < 0) this.alpha = 0;\n      } else {\n        this.alpha = 1;\n      }\n      if (d > 1) {\n        // (a + this.size / 2) * (a + this.size / 2) + (b + this.size / 2) * (b + this.size / 2)) {\n        x *= -0.99;\n        y *= -0.99;\n        this.pos.x = x + a;\n        this.pos.y = y + b;\n      }\n    }\n  }\n\n  // deltaTime is given in ms!\n  update(deltaTime) {\n    // updatePosition\n    this.pos.x += (this.vel.x * deltaTime) / 1000;\n    this.pos.y += (this.vel.y * deltaTime) / 1000;\n    if (this.isRandomWalk) this.randomMovement(deltaTime);\n    if (this.isRandomOrientated) this.randomOrientation(deltaTime);\n    this.handleOutOfBounds();\n  }\n\n  draw() {\n    this.ctx.globalAlpha = this.alpha;\n    this.ctx.beginPath();\n    let x = this.pos.x + this.ld.x;\n    let y = this.pos.y + this.ld.y;\n    this.ctx.moveTo(x, y);\n    x = this.pos.x + this.lu.x;\n    y = this.pos.y + this.lu.y;\n    this.ctx.lineTo(x, y);\n    x = this.pos.x + this.r.x;\n    y = this.pos.y + this.r.y;\n    this.ctx.lineTo(x, y);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n  }\n}\n\nclass OobBird extends Oob {\n  protected animationTime: number;\n  protected animationFrame: number;\n  protected animdir: number;\n  protected colorsLeft: any[];\n  protected colorsRight: any[];\n\n  constructor(\n    size,\n    color,\n    orientation,\n    movementDirection,\n    speed,\n    randomisation,\n    apertureType,\n    isRandomWalk,\n    isRandomOrientated,\n    isFade,\n    canvas,\n    ctx,\n    units\n  ) {\n    super(\n      size,\n      color,\n      orientation,\n      movementDirection,\n      speed,\n      randomisation,\n      apertureType,\n      isRandomWalk,\n      isRandomOrientated,\n      isFade,\n      canvas,\n      ctx,\n      units\n    );\n    this.animationTime = Math.random();\n    this.animationFrame = 4;\n    if (this.animationTime < 0.8) this.animationFrame = 3;\n    if (this.animationTime < 0.6) this.animationFrame = 2;\n    if (this.animationTime < 0.4) this.animationFrame = 1;\n    if (this.animationTime < 0.2) this.animationFrame = 0;\n    this.animationTime *= 0.1;\n    this.animdir = 1;\n    let stdColor = color;\n    this.makeColors(stdColor, orientation);\n  }\n\n  makeColors(color, orientation) {\n    this.colorsLeft = [];\n    this.colorsRight = [];\n    let brightenStartR = Math.round(-getY(orientation) * 5);\n    let brightenStartL = Math.round(getX(orientation) * 5);\n    let colR = brighten(color, brightenStartR);\n    let colL = brighten(color, brightenStartL);\n    this.colorsRight.push(stdColorToHex(colR));\n    this.colorsLeft.push(stdColorToHex(colL));\n    for (let i = 0; i < 6; i++) {\n      colR = brighten(colR, brightenStartR);\n      colL = brighten(colL, brightenStartL);\n      this.colorsRight.push(stdColorToHex(colR));\n      this.colorsLeft.push(stdColorToHex(colL));\n    }\n  }\n\n  update(deltaTime) {\n    super.update(deltaTime);\n    this.animationTime += deltaTime / 1000;\n    let d = 0.1 - this.animationTime;\n    if (d < 0) {\n      this.animationFrame += this.animdir;\n      this.animationTime = -d;\n      if (this.animationFrame > 5 || this.animationFrame < 1) {\n        this.animationTime -= 0.1;\n        this.animdir *= -1;\n      }\n    }\n    //this.animationFrame = 5;\n  }\n\n  draw() {\n    this.ctx.globalAlpha = this.alpha;\n    let px = this.pos.x + 0.2 * this.r.x;\n    let py = this.pos.y + 0.2 * this.r.y;\n    this.ctx.beginPath();\n    this.ctx.moveTo(px, py);\n    let x = this.pos.x + this.ld.x / (this.animationFrame * 0.1 + 1);\n    let y = this.pos.y + this.ld.y / (this.animationFrame * 0.1 + 1);\n    this.ctx.lineTo(x, y);\n    x = this.pos.x + this.r.x;\n    y = this.pos.y + this.r.y;\n    this.ctx.lineTo(x, y);\n    this.ctx.fillStyle = this.colorsRight[this.animationFrame];\n    this.ctx.fill();\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(px, py);\n    x = this.pos.x + this.lu.x / (this.animationFrame * 0.1 + 1);\n    y = this.pos.y + this.lu.y / (this.animationFrame * 0.1 + 1);\n    this.ctx.lineTo(x, y);\n    x = this.pos.x + this.r.x;\n    y = this.pos.y + this.r.y;\n    this.ctx.lineTo(x, y);\n    this.ctx.fillStyle = this.colorsLeft[this.animationFrame];\n    this.ctx.fill();\n  }\n}\n\nclass OobCircle extends Oob {\n  draw() {\n    this.ctx.globalAlpha = this.alpha;\n    this.ctx.beginPath();\n    this.ctx.arc(this.pos.x, this.pos.y, this.size / 2, 0, Math.PI * 2);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n  }\n}\n\nclass OobSquare extends Oob {\n  draw() {\n    this.ctx.globalAlpha = this.alpha;\n    this.ctx.beginPath();\n    let x = this.pos.x - this.size / 2;\n    let y = this.pos.y - this.size / 2;\n    this.ctx.moveTo(x, y);\n    x = this.pos.x + this.size / 2;\n    y = this.pos.y - this.size / 2;\n    this.ctx.lineTo(x, y);\n    x = this.pos.x + this.size / 2;\n    y = this.pos.y + this.size / 2;\n    this.ctx.lineTo(x, y);\n    x = this.pos.x - this.size / 2;\n    y = this.pos.y + this.size / 2;\n    this.ctx.lineTo(x, y);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n  }\n}\n\nclass OobImage extends Oob {\n  private img: any;\n  private keyframes: any;\n  private keyframeTime: any;\n  private mirrorType: any;\n  private imgWidth: number;\n  private imgHeight: number;\n  private actualKeyframe: number;\n  private animationTime: number;\n\n  constructor(\n    size,\n    color,\n    orientation,\n    movementDirection,\n    speed,\n    randomisation,\n    apertureType,\n    isRandomWalk,\n    isRandomOrientated,\n    isFade,\n    imageArray,\n    keyframes,\n    keyframeTime,\n    mirrorType,\n    canvas,\n    ctx,\n    units\n  ) {\n    super(\n      size,\n      color,\n      orientation,\n      movementDirection,\n      speed,\n      randomisation,\n      apertureType,\n      isRandomWalk,\n      isRandomOrientated,\n      isFade,\n      canvas,\n      ctx,\n      units\n    );\n    if (Array.isArray(imageArray)) {\n      let i = Math.floor(Math.random() * imageArray.length);\n      this.img = imageArray[i];\n      this.keyframes = getValueFromArrayOrNot(keyframes, i);\n      this.keyframeTime = getValueFromArrayOrNot(keyframeTime, i);\n      this.mirrorType = getValueFromArrayOrNot(mirrorType, i);\n    } else {\n      this.img = imageArray;\n      this.keyframes = keyframes;\n      this.keyframeTime = keyframeTime;\n      this.mirrorType = mirrorType;\n    }\n    this.imgWidth = this.img.naturalWidth / this.keyframes;\n    this.imgHeight = this.img.naturalHeight;\n    this.actualKeyframe = Math.floor(Math.random() * this.keyframes);\n    this.animationTime = Math.random() * this.keyframeTime;\n  }\n\n  update(deltaTime) {\n    super.update(deltaTime);\n    this.animationTime += deltaTime / 1000;\n    let d = this.keyframeTime - this.animationTime;\n    if (d < 0) {\n      this.animationTime = 0;\n      this.actualKeyframe++;\n      if (this.actualKeyframe >= this.keyframes) this.actualKeyframe = 0;\n    }\n  }\n\n  draw() {\n    this.ctx.globalAlpha = this.alpha;\n    this.ctx.translate(this.pos.x, this.pos.y);\n    if (this.mirrorType === 0) {\n      this.ctx.rotate((-Math.PI * this.orientation) / 180);\n    } else if (this.mirrorType == 1) {\n      if (this.orientation > 90 && this.orientation < 270) {\n        this.ctx.rotate((-Math.PI * (this.orientation - 180)) / 180);\n      } else {\n        this.ctx.rotate((-Math.PI * this.orientation) / 180);\n      }\n    }\n    this.ctx.translate(-this.pos.x, -this.pos.y);\n    if (this.mirrorType === 0) {\n      this.ctx.drawImage(\n        this.img,\n        this.actualKeyframe * this.imgWidth,\n        0,\n        this.imgWidth,\n        this.imgHeight,\n        this.pos.x - this.size / 2,\n        this.pos.y - this.size / 2,\n        this.size,\n        this.size\n      );\n    } else if (this.mirrorType === 1) {\n      if (this.orientation > 90 && this.orientation < 270) {\n        this.ctx.drawImage(\n          this.img,\n          this.actualKeyframe * this.imgWidth,\n          this.imgHeight / 2,\n          this.imgWidth,\n          this.imgHeight / 2,\n          this.pos.x - this.size / 2,\n          this.pos.y - this.size / 2,\n          this.size,\n          this.size\n        );\n      } else {\n        this.ctx.drawImage(\n          this.img,\n          this.actualKeyframe * this.imgWidth,\n          0,\n          this.imgWidth,\n          this.imgHeight / 2,\n          this.pos.x - this.size / 2,\n          this.pos.y - this.size / 2,\n          this.size,\n          this.size\n        );\n      }\n    }\n    this.ctx.translate(this.pos.x, this.pos.y);\n    if (this.mirrorType === 0) {\n      this.ctx.rotate((Math.PI * this.orientation) / 180);\n    } else if (this.mirrorType === 1) {\n      if (this.orientation > 90 && this.orientation < 270) {\n        this.ctx.rotate((Math.PI * (this.orientation - 180)) / 180);\n      } else {\n        this.ctx.rotate((Math.PI * this.orientation) / 180);\n      }\n    }\n    this.ctx.translate(-this.pos.x, -this.pos.y);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}