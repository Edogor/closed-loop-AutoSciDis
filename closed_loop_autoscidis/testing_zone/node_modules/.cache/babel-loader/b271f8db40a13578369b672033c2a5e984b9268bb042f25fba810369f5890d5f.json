{"ast":null,"code":"import{initJsPsych}from'jspsych';import'jspsych/css/jspsych.css';import'sweetbean/dist/style/main.css';import'sweetbean/dist/style/bandit.css';import*as SweetBeanRuntime from'sweetbean/dist/runtime';import htmlKeyboardResponse from'@jspsych/plugin-html-keyboard-response';import jsPsychRok from'@jspsych-contrib/plugin-rok';global.jsPsychRok=jsPsychRok;global.initJsPsych=initJsPsych;global.jsPsychHtmlKeyboardResponse=htmlKeyboardResponse;Object.entries(SweetBeanRuntime).forEach(_ref=>{let[key,value]=_ref;global[key]=value;});/**\n * This is the main function where you program your experiment. For example, you can install jsPsych via node and\n * use functions from there\n * @param id this is a number between 0 and number of participants. You can use it for example to counterbalance between subjects\n * @param condition this is a condition (for example uploaded to the database with the experiment runner in autora)\n * @returns {Promise<*>} after running the experiment for the subject return the observation in this function, it will be uploaded to autora\n */const main=async(id,condition)=>{const observation=await eval(condition['experiment_code']+\"\\nrunExperiment();\");return JSON.stringify(observation);};export default main;","map":{"version":3,"names":["initJsPsych","SweetBeanRuntime","htmlKeyboardResponse","jsPsychRok","global","jsPsychHtmlKeyboardResponse","Object","entries","forEach","_ref","key","value","main","id","condition","observation","eval","JSON","stringify"],"sources":["/workspaces/closed-loop-AutoSciDis/closed_loop_autoscidis/testing_zone/src/design/main.js"],"sourcesContent":["import { initJsPsych } from 'jspsych';\nimport 'jspsych/css/jspsych.css'\nimport 'sweetbean/dist/style/main.css';\nimport 'sweetbean/dist/style/bandit.css';\nimport * as SweetBeanRuntime from 'sweetbean/dist/runtime';\n\nimport htmlKeyboardResponse from '@jspsych/plugin-html-keyboard-response';\nimport jsPsychRok from '@jspsych-contrib/plugin-rok'\nglobal.jsPsychRok = jsPsychRok\n\nglobal.initJsPsych = initJsPsych;\nglobal.jsPsychHtmlKeyboardResponse = htmlKeyboardResponse\n\n\nObject.entries(SweetBeanRuntime).forEach(([key, value]) => {\n    global[key] = value;\n});\n\n/**\n * This is the main function where you program your experiment. For example, you can install jsPsych via node and\n * use functions from there\n * @param id this is a number between 0 and number of participants. You can use it for example to counterbalance between subjects\n * @param condition this is a condition (for example uploaded to the database with the experiment runner in autora)\n * @returns {Promise<*>} after running the experiment for the subject return the observation in this function, it will be uploaded to autora\n */\nconst main = async (id, condition) => {\n    const observation = await eval(condition['experiment_code'] + \"\\nrunExperiment();\");\n    return JSON.stringify(observation)\n}\n\n\nexport default main"],"mappings":"AAAA,OAASA,WAAW,KAAQ,SAAS,CACrC,MAAO,yBAAyB,CAChC,MAAO,+BAA+B,CACtC,MAAO,iCAAiC,CACxC,MAAO,GAAK,CAAAC,gBAAgB,KAAM,wBAAwB,CAE1D,MAAO,CAAAC,oBAAoB,KAAM,wCAAwC,CACzE,MAAO,CAAAC,UAAU,KAAM,6BAA6B,CACpDC,MAAM,CAACD,UAAU,CAAGA,UAAU,CAE9BC,MAAM,CAACJ,WAAW,CAAGA,WAAW,CAChCI,MAAM,CAACC,2BAA2B,CAAGH,oBAAoB,CAGzDI,MAAM,CAACC,OAAO,CAACN,gBAAgB,CAAC,CAACO,OAAO,CAACC,IAAA,EAAkB,IAAjB,CAACC,GAAG,CAAEC,KAAK,CAAC,CAAAF,IAAA,CAClDL,MAAM,CAACM,GAAG,CAAC,CAAGC,KAAK,CACvB,CAAC,CAAC,CAEF;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,IAAI,CAAG,KAAAA,CAAOC,EAAE,CAAEC,SAAS,GAAK,CAClC,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAC,IAAI,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAG,oBAAoB,CAAC,CACnF,MAAO,CAAAG,IAAI,CAACC,SAAS,CAACH,WAAW,CAAC,CACtC,CAAC,CAGD,cAAe,CAAAH,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}