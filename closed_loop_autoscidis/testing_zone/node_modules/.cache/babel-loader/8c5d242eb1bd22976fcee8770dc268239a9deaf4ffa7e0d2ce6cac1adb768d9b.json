{"ast":null,"code":"import { ParameterType } from 'jspsych';\nconst info = {\n  name: \"html-keyboard-response\",\n  parameters: {\n    /**\r\n     * The HTML string to be displayed.\r\n     */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined\n    },\n    /**\r\n     * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\r\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\"\n    },\n    /**\r\n     * Any content here will be displayed below the stimulus.\r\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null\n    },\n    /**\r\n     * How long to show the stimulus.\r\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null\n    },\n    /**\r\n     * How long to show trial before it ends.\r\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null\n    },\n    /**\r\n     * If true, trial will end when subject makes a response.\r\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true\n    }\n  }\n};\n/**\r\n * **html-keyboard-response**\r\n *\r\n * jsPsych plugin for displaying a stimulus and getting a keyboard response\r\n *\r\n * @author Josh de Leeuw\r\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-keyboard-response/ html-keyboard-response plugin documentation on jspsych.org}\r\n */\nclass HtmlKeyboardResponsePlugin {\n  constructor(jsPsych) {\n    this.jsPsych = jsPsych;\n  }\n  trial(display_element, trial) {\n    var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">' + trial.stimulus + \"</div>\";\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n    // draw\n    display_element.innerHTML = new_html;\n    // store response\n    var response = {\n      rt: null,\n      key: null\n    };\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key\n      };\n      // clear the display\n      display_element.innerHTML = \"\";\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n    // function to handle responses by the subject\n    var after_response = info => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").className += \" responded\";\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false\n      });\n    }\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n  simulate(trial, simulation_mode, simulation_options, load_callback) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n  create_simulation_data(trial, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices)\n    };\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n    return data;\n  }\n  simulate_data_only(trial, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n    this.jsPsych.finishTrial(data);\n  }\n  simulate_visual(trial, simulation_options, load_callback) {\n    const data = this.create_simulation_data(trial, simulation_options);\n    const display_element = this.jsPsych.getDisplayElement();\n    this.trial(display_element, trial);\n    load_callback();\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n}\nHtmlKeyboardResponsePlugin.info = info;\nexport { HtmlKeyboardResponsePlugin as default };","map":{"version":3,"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","pretty_name","default","undefined","choices","KEYS","prompt","stimulus_duration","INT","trial_duration","response_ends_trial","BOOL","HtmlKeyboardResponsePlugin","constructor","jsPsych","trial","display_element","new_html","innerHTML","response","rt","key","end_trial","pluginAPI","clearAllTimeouts","keyboardListener","cancelKeyboardResponse","trial_data","finishTrial","after_response","querySelector","className","getKeyboardResponse","callback_function","valid_responses","rt_method","persist","allow_held_key","setTimeout","style","visibility","simulate","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","create_simulation_data","default_data","randomization","sampleExGaussian","getValidKey","data","mergeSimulationData","ensureSimulationDataConsistency","getDisplayElement","pressKey"],"sources":["/workspaces/closed-loop-AutoSciDis/closed_loop_autoscidis/testing_zone/node_modules/@jspsych/plugin-html-keyboard-response/src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-keyboard-response\",\n  parameters: {\n    /**\n     * The HTML string to be displayed.\n     */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /**\n     * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /**\n     * Any content here will be displayed below the stimulus.\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /**\n     * How long to show the stimulus.\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /**\n     * How long to show trial before it ends.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /**\n     * If true, trial will end when subject makes a response.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **html-keyboard-response**\n *\n * jsPsych plugin for displaying a stimulus and getting a keyboard response\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-keyboard-response/ html-keyboard-response plugin documentation on jspsych.org}\n */\nclass HtmlKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // draw\n    display_element.innerHTML = new_html;\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n}\n\nexport default HtmlKeyboardResponsePlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}